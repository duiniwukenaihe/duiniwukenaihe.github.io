<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>duiniwukenaihe</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 27 Mar 2021 12:07:59 +0800</pubDate>
    <lastBuildDate>Sat, 27 Mar 2021 12:07:59 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Kuberentes 1.20.5搭建eck</title>
        <description></description>
        <pubDate>Sat, 27 Mar 2021 02:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/03/27/Kuberentes-eck/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/03/27/Kuberentes-eck/</guid>
        
        <category>kubernetes</category>
        
        <category>eck</category>
        
        
        <category>kubernetes1.20</category>
        
      </item>
    
      <item>
        <title>Kubernetes 1.20.5 安装traefik在腾讯云下的实践</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#背景&quot; id=&quot;markdown-toc-背景&quot;&gt;背景&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#关于traefik的结缘&quot; id=&quot;markdown-toc-关于traefik的结缘&quot;&gt;关于traefik的结缘&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ingress-controller对比&quot; id=&quot;markdown-toc-ingress-controller对比&quot;&gt;ingress controller对比：&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-kubernetes-gateway-api&quot; id=&quot;markdown-toc-1-kubernetes-gateway-api&quot;&gt;1. Kubernetes Gateway API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1gateway-api-是什么&quot; id=&quot;markdown-toc-1gateway-api-是什么&quot;&gt;1、Gateway API 是什么&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2gateway-api-的目标&quot; id=&quot;markdown-toc-2gateway-api-的目标&quot;&gt;2、Gateway API 的目标&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-traefik-on-kubernetes实践&quot; id=&quot;markdown-toc-2-traefik-on-kubernetes实践&quot;&gt;2. traefik on kubernetes实践&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-创建crd&quot; id=&quot;markdown-toc-1-创建crd&quot;&gt;1. 创建CRD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-创建rbac权限&quot; id=&quot;markdown-toc-2-创建rbac权限&quot;&gt;2. 创建RBAC权限&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-创建-traefik-配置文件&quot; id=&quot;markdown-toc-3-创建-traefik-配置文件&quot;&gt;3. 创建 Traefik 配置文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-设置节点label标签&quot; id=&quot;markdown-toc-4-设置节点label标签&quot;&gt;4. 设置节点label标签&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5安装-kubernetes-gateway-crd-资源&quot; id=&quot;markdown-toc-5安装-kubernetes-gateway-crd-资源&quot;&gt;5、安装 Kubernetes Gateway CRD 资源&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-kubernetes-部署-traefik&quot; id=&quot;markdown-toc-6-kubernetes-部署-traefik&quot;&gt;6. Kubernetes 部署 Traefik&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-配置路由规则与腾讯云clb整合&quot; id=&quot;markdown-toc-3-配置路由规则与腾讯云clb整合&quot;&gt;3. 配置路由规则，与腾讯云clb整合&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-slb-绑定traefik--http端口&quot; id=&quot;markdown-toc-1-slb-绑定traefik--http端口&quot;&gt;1. slb 绑定traefik  http端口&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-配置路由规则&quot; id=&quot;markdown-toc-2-配置路由规则&quot;&gt;2. 配置路由规则&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-crd方式&quot; id=&quot;markdown-toc-1-crd方式&quot;&gt;1. CRD方式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-ingress方式&quot; id=&quot;markdown-toc-2-ingress方式&quot;&gt;2. Ingress方式&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3方式三使用-kubernetes-gateway-api&quot; id=&quot;markdown-toc-3方式三使用-kubernetes-gateway-api&quot;&gt;3、方式三：使用 Kubernetes Gateway API&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-创建-gatewayclass&quot; id=&quot;markdown-toc-1-创建-gatewayclass&quot;&gt;1. 创建 GatewayClass&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-配置-http-路由规则-traefik-dashboard-为例&quot; id=&quot;markdown-toc-2-配置-http-路由规则-traefik-dashboard-为例&quot;&gt;2 配置 HTTP 路由规则 （Traefik Dashboard 为例）&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
个人使用traefik有差不多1-2年时间，kubernetes ingress controller 代理有很多种方式 例如 ingress-nginx  kong  istio 等等。个人比较习惯traefik。从19年就开始使用。最早使用traefik 不直接使用腾讯云公有云的slb是因为当时slb不能挂载多个证书，而我kubernetes的自建集群实在不想挂载多个slb.就偷懒用了slb  udp绑定运行traefik节点的 80  443端口。证书tls的secret 直接挂载在traefik代理层上面。hsts  http跳转https的特性都配置在了traefik代理层上面。应用比较少。qps也没有那么高，这样的简单应用就满足了我的需求了
&lt;h2 id=&quot;关于traefik的结缘&quot;&gt;关于traefik的结缘&lt;/h2&gt;
最早接触traefik是Google上面看ingress controller 找到的 然后再阳明大佬的博客看到了traefik的实践&lt;a href=&quot;https://www.qikqiak.com/post/traefik2-ga/&quot;&gt;https://www.qikqiak.com/post/traefik2-ga/&lt;/a&gt;，还有超级小豆丁的博客&lt;a href=&quot;http://www.mydlq.club/article/41&quot;&gt;http://www.mydlq.club/article/41&lt;/a&gt; 。两位大佬的博客是kubernetes初学者的宝藏博客值得收藏拜读。
顺便吐个糟，用的traefik2.4版本… 抄的豆丁大佬的..&lt;a href=&quot;http://www.mydlq.club/article/107/&quot;&gt;http://www.mydlq.club/article/107/&lt;/a&gt;哈哈哈
&lt;h2 id=&quot;ingress-controller对比&quot;&gt;ingress controller对比：&lt;/h2&gt;
参照&lt;a href=&quot;https://zhuanlan.zhihu.com/p/109458069&quot;&gt;https://zhuanlan.zhihu.com/p/109458069&lt;/a&gt;。
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/b31233969a25874c0e348aea86bfba47.png#align=left&amp;amp;display=inline&amp;amp;height=742&amp;amp;margin=[objectObject]&amp;amp;originHeight=742&amp;amp;originWidth=1600&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=1600&quot; alt=&quot;&quot; /&gt;
&lt;h1 id=&quot;1-kubernetes-gateway-api&quot;&gt;1. Kubernetes Gateway API&lt;/h1&gt;
v2.4版本的改变（在 Traefik v2.4 版本中增加了对 Kubernetes Gateway API 的支持）一下部分抄自豆丁大佬与官方文档&lt;a href=&quot;https://gateway-api.sigs.k8s.io/&quot;&gt;https://gateway-api.sigs.k8s.io/&lt;/a&gt;。
&lt;h2 id=&quot;1gateway-api-是什么&quot;&gt;1、Gateway API 是什么&lt;/h2&gt;
Gateway API是由&lt;a href=&quot;https://github.com/kubernetes/community/tree/master/sig-network&quot;&gt;SIG-NETWORK&lt;/a&gt; 社区管理的一个开源项目。它是在Kubernetes中对服务网络建模的资源的集合。这些资源- ，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GatewayClass&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gateway&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPRoute&lt;/code&gt;， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPRoute&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt;等-旨在通过表现力，可扩展和面向角色由很多供应商实现的，并具有广泛的行业支持接口演进Kubernetes服务网络。
&lt;em&gt;注意：此项目以前被称为“服务API”，直到2021年2月被重命名为“_Gateway API _”。&lt;/em&gt;
&lt;h2 id=&quot;2gateway-api-的目标&quot;&gt;2、Gateway API 的目标&lt;/h2&gt;
Gateway API 旨在通过提供可表达的，可扩展的，面向角色的接口来改善服务网络，这些接口已由许多供应商实施并获得了广泛的行业支持。
网关 API 是 API 资源（服务、网关类、网关、HTTPRoute、TCPRoute等）的集合。这些资源共同为各种网络用例建模。
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/45e617bd8f628b4198fdc35ff75d04b3.png#align=left&amp;amp;display=inline&amp;amp;height=1418&amp;amp;margin=[objectObject]&amp;amp;originHeight=1418&amp;amp;originWidth=2414&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=2414&quot; alt=&quot;&quot; /&gt;
Gateway API 如何根据 Ingress 等当前标准进行改进？

&lt;ul&gt;
  &lt;li&gt;以下设计目标驱动了Gateway API的概念。这些证明了Gateway如何旨在改进Ingress等当前标准。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;面向角色&lt;/strong&gt;-网关由API资源组成，这些API资源对使用和配置Kubernetes服务网络的组织角色进行建模。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;便携式&lt;/strong&gt;-这不是改进，而是应该保持不变。就像Ingress是具有&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&quot;&gt;许多实现&lt;/a&gt;的通用规范一样 ，Gateway API也被设计为受许多实现支持的可移植规范。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;富有表现力&lt;/strong&gt;-网关API资源支持核心功能，例如基于标头的匹配，流量加权以及其他只能通过自定义批注在Ingress中实现的功能。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可扩展&lt;/strong&gt;-网关API允许在API的各个层上链接自定义资源。这样就可以在API结构内的适当位置进行精细的自定义。&lt;/li&gt;
&lt;/ul&gt;

其他一些值得注意的功能包括：

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GatewayClasses&lt;/strong&gt; -GatewayClasses形式化负载平衡实现的类型。这些类使用户可以轻松，明确地了解通过Kubernetes资源模型可以使用的功能。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;共享网关和跨命名空间支持&lt;/strong&gt;-通过允许独立的Route资源绑定到同一网关，它们可以共享负载平衡器和VIP。这允许团队（甚至跨命名空间）在没有直接协调的情况下安全地共享基础结构。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类型化路由和类型化后端&lt;/strong&gt;-网关API支持类型化路由资源以及不同类型的后端。这使API可以灵活地支持各种协议（例如HTTP和gRPC）和各种后端目标（例如Kubernetes Services，存储桶或函数）。&lt;/li&gt;
&lt;/ul&gt;

如果想了解更多内容，可以访问 &lt;a href=&quot;https://gateway-api.sigs.k8s.io/&quot;&gt;Kubernetes Gateway API 文档&lt;/a&gt; 。
&lt;h1 id=&quot;2-traefik-on-kubernetes实践&quot;&gt;2. traefik on kubernetes实践&lt;/h1&gt;
部署玩Traefik 应用后，创建外部访问 Kubernetes 内部应用的路由规则，才能从外部访问kubernetes内部应用。Traefik 目前支持三种方式创建路由规则方式，一种是创建 Traefik 自定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kubernetes CRD&lt;/code&gt; 资源，另一种是创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kubernetes Ingress&lt;/code&gt; 资源，还有就是 v2.4 版本对 Kubernetes 扩展 API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kubernetes Gateway API&lt;/code&gt; 适配的一种方式，创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GatewayClass&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gateway&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPRoute&lt;/code&gt; 资源
&lt;strong&gt;注意：这里 Traefik 是部署在 kube-system namespace 下，如果不想部署到配置的 namespace，需要修改下面部署文件中的 namespace 参数。当然了也可以新建一个单独的namespace去部署traefik&lt;/strong&gt;
&lt;h2 id=&quot;1-创建crd&quot;&gt;1. 创建CRD&lt;/h2&gt;
参照&lt;a href=&quot;https://doc.traefik.io/traefik/reference/dynamic-configuration/kubernetes-crd/&quot;&gt;https://doc.traefik.io/traefik/reference/dynamic-configuration/kubernetes-crd/&lt;/a&gt;

traefik-crd.yaml
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;  traefik-crd.yaml 
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutes.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRoute
    plural: ingressroutes
    singular: ingressroute
  scope: Namespaced

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: middlewares.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: Middleware
    plural: middlewares
    singular: middleware
  scope: Namespaced

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutetcps.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRouteTCP
    plural: ingressroutetcps
    singular: ingressroutetcp
  scope: Namespaced

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressrouteudps.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRouteUDP
    plural: ingressrouteudps
    singular: ingressrouteudp
  scope: Namespaced

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsoptions.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TLSOption
    plural: tlsoptions
    singular: tlsoption
  scope: Namespaced

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsstores.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TLSStore
    plural: tlsstores
    singular: tlsstore
  scope: Namespaced

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: traefikservices.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TraefikService
    plural: traefikservices
    singular: traefikservice
  scope: Namespaced

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: serverstransports.traefik.containo.us

spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: ServersTransport
    plural: serverstransports
    singular: serverstransport
  scope: Namespaced
EOF
kubectl apply -f traefik-crd.yaml
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-创建rbac权限&quot;&gt;2. 创建RBAC权限&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; traefik-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
  namespace: kube-system

rules:
  - apiGroups:
      - &quot;&quot;
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - middlewares
      - ingressroutes
      - traefikservices
      - ingressroutetcps
      - ingressrouteudps
      - tlsoptions
      - tlsstores
      - serverstransports
    verbs:
      - get
      - list
      - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
  - kind: ServiceAccount
    name: traefik-ingress-controller
    namespace: kube-system
EOF
 kubectl apply -f traefik-rbac.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-创建-traefik-配置文件&quot;&gt;3. 创建 Traefik 配置文件&lt;/h2&gt;
#号后为注释，跟2.X前几个版本一样。增加了kubernetesIngress  kubernetesGateway两种路由方式，过去只部署了CRD的方式。
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; traefik-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: traefik-config
  namespace: kube-system
data:
  traefik.yaml: |-
    ping: &quot;&quot;                    ## 启用 Ping
    serversTransport:
      insecureSkipVerify: true  ## Traefik 忽略验证代理服务的 TLS 证书
    api:
      insecure: true            ## 允许 HTTP 方式访问 API
      dashboard: true           ## 启用 Dashboard
      debug: false              ## 启用 Debug 调试模式
    metrics:
      prometheus: &quot;&quot;            ## 配置 Prometheus 监控指标数据，并使用默认配置
    entryPoints:
      web:
        address: &quot;:80&quot;          ## 配置 80 端口，并设置入口名称为 web
      websecure:
        address: &quot;:443&quot;         ## 配置 443 端口，并设置入口名称为 websecure
    providers:
      kubernetesCRD: &quot;&quot;         ## 启用 Kubernetes CRD 方式来配置路由规则
      kubernetesIngress: &quot;&quot;     ## 启用 Kubernetes Ingress 方式来配置路由规则
      kubernetesGateway: &quot;&quot;     ## 启用 Kubernetes Gateway API
    experimental:               
      kubernetesGateway: true   ## 允许使用 Kubernetes Gateway API
    log:
      filePath: &quot;&quot;              ## 设置调试日志文件存储路径，如果为空则输出到控制台
      level: error              ## 设置调试日志级别
      format: json              ## 设置调试日志格式
    accessLog:
      filePath: &quot;&quot;              ## 设置访问日志文件存储路径，如果为空则输出到控制台
      format: json              ## 设置访问调试日志格式
      bufferingSize: 0          ## 设置访问日志缓存行数
      filters:
        #statusCodes: [&quot;200&quot;]   ## 设置只保留指定状态码范围内的访问日志
        retryAttempts: true     ## 设置代理访问重试失败时，保留访问日志
        minDuration: 20         ## 设置保留请求时间超过指定持续时间的访问日志
      fields:                   ## 设置访问日志中的字段是否保留（keep 保留、drop 不保留）
        defaultMode: keep       ## 设置默认保留访问日志字段
        names:                  ## 针对访问日志特别字段特别配置保留模式
          ClientUsername: drop  
        headers:                ## 设置 Header 中字段是否保留
          defaultMode: keep     ## 设置默认保留 Header 中字段
          names:                ## 针对 Header 中特别字段特别配置保留模式
            User-Agent: redact
            Authorization: drop
            Content-Type: keep
    #tracing:                     ## 链路追踪配置,支持 zipkin、datadog、jaeger、instana、haystack 等 
    #  serviceName:               ## 设置服务名称（在链路追踪端收集后显示的服务名）
    #  zipkin:                    ## zipkin配置
    #    sameSpan: true           ## 是否启用 Zipkin SameSpan RPC 类型追踪方式
    #    id128Bit: true           ## 是否启用 Zipkin 128bit 的跟踪 ID
    #    sampleRate: 0.1          ## 设置链路日志采样率（可以配置0.0到1.0之间的值）
    #    httpEndpoint: http://localhost:9411/api/v2/spans     ## 配置 Zipkin Server 端点
EOF
kubectl apply -f traefik-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;4-设置节点label标签&quot;&gt;4. 设置节点label标签&lt;/h2&gt;
Traefix 采用 DaemonSet方式构建，在需要安装的节点上面打上标签，这里在三个work节点都安装上了默认：
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl label nodes {sh-work-01,sh-work-02,sh-work-02} IngressProxy=true
kubectl get nodes --show-labels
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/a0f87f352f1ca682216e7050a3be3161.png#align=left&amp;amp;display=inline&amp;amp;height=339&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=677&amp;amp;originWidth=1188&amp;amp;size=126050&amp;amp;status=done&amp;amp;style=none&amp;amp;width=594&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/4ada6304aa4835f6c0e6f2a2b13161b8.png#align=left&amp;amp;display=inline&amp;amp;height=120&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=239&amp;amp;originWidth=1563&amp;amp;size=57181&amp;amp;status=done&amp;amp;style=none&amp;amp;width=781.5&quot; alt=&quot;image.png&quot; /&gt;
注意：如果想删除标签，可以使用 **kubectl label nodes k8s-node-03 IngressProxy- **命令。哈哈哈偶尔需要去掉标签，不调度。
&lt;h2 id=&quot;5安装-kubernetes-gateway-crd-资源&quot;&gt;5、安装 Kubernetes Gateway CRD 资源&lt;/h2&gt;
由于目前 Kubernetes 集群上默认没有安装 Service APIs，我们需要提前安装 Gateway API 的 CRD 资源，需要确保在 Traefik 安装之前启用 Service APIs 资源。
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -k &quot;github.com/kubernetes-sigs/service-apis/config/crd?ref=v0.2.0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
不过由于github网络问题，基本无法安装的。我是直接把github上包下载到本地采用本地安装的方式安装
进入
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/36138353fc0d487898dee680e5d06fd1.png#align=left&amp;amp;display=inline&amp;amp;height=381&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=762&amp;amp;originWidth=1672&amp;amp;size=114244&amp;amp;status=done&amp;amp;style=none&amp;amp;width=836&quot; alt=&quot;image.png&quot; /&gt;
进入base目录直接全部安装:
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl  apply  -f .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3c4d199cf29cd3b486c429349b400ec6.png#align=left&amp;amp;display=inline&amp;amp;height=309&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=618&amp;amp;originWidth=1446&amp;amp;size=101285&amp;amp;status=done&amp;amp;style=none&amp;amp;width=723&quot; alt=&quot;image.png&quot; /&gt;
&lt;h2 id=&quot;6-kubernetes-部署-traefik&quot;&gt;6. Kubernetes 部署 Traefik&lt;/h2&gt;
其实我就可以忽略443了….因为我想在&lt;a href=&quot;https://console.cloud.tencent.com/clb&quot;&gt;slb&lt;/a&gt;  哦 对也叫&lt;a href=&quot;https://console.cloud.tencent.com/clb&quot;&gt;clb&lt;/a&gt;.直接做限制。对外只保留80端口。
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; traefik-deploy.yaml
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace： kube-system
spec:
  ports:
    - name: web
      port: 80
    - name: websecure
      port: 443
    - name: admin
      port: 8080
  selector:
    app: traefik
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace： kube-system
  name: traefik-ingress-controller
  labels:
    app: traefik
spec:
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      name: traefik
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 1
      containers:
        - image: ccr.ccs.tencentyun.com/XXXX/traefik:v2.4.3 
          name: traefik-ingress-lb
          ports:
            - name: web
              containerPort: 80
              hostPort: 80     
            - name: websecure
              containerPort: 443
              hostPort: 443        
            - name: admin
              containerPort: 8080  
          resources:
            limits:
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 1000m
              memory: 1024Mi
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          args:
            - --configfile=/config/traefik.yaml
          volumeMounts:
            - mountPath: &quot;/config&quot;
              name: &quot;config&quot;
          readinessProbe:
            httpGet:
              path: /ping
              port: 8080
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /ping
              port: 8080
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5    
      volumes:
        - name: config
          configMap:
            name: traefik-config 
      tolerations:              ## 设置容忍所有污点，防止节点被设置污点
        - operator: &quot;Exists&quot;
      nodeSelector:             ## 设置node筛选器，在特定label的节点上启动
        IngressProxy: &quot;true
EOF
kubectl apply -f traefik-deploy.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
kubectl get pods -n kube-system 验证
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/75325eac6c89406f5abbb9c6352323c9.png#align=left&amp;amp;display=inline&amp;amp;height=342&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=683&amp;amp;originWidth=1009&amp;amp;size=91180&amp;amp;status=done&amp;amp;style=none&amp;amp;width=504.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h1 id=&quot;3-配置路由规则与腾讯云clb整合&quot;&gt;3. 配置路由规则，与腾讯云clb整合&lt;/h1&gt;
&lt;h2 id=&quot;1-slb-绑定traefik--http端口&quot;&gt;1. slb 绑定traefik  http端口&lt;/h2&gt;
关于腾讯云负载均衡 slb  or  clb可以参照文档&lt;a href=&quot;https://cloud.tencent.com/document/product/214&quot;&gt;https://cloud.tencent.com/document/product/214&lt;/a&gt;了解。过去使用slb用的tcp代理方式有一下原因：

&lt;ol&gt;
  &lt;li&gt;过去的腾讯云slb不支持一个负载均衡挂载多个证书，个人不想启用多个slb绑定。&lt;/li&gt;
  &lt;li&gt;在slb上面配置域名比较麻烦…..没有再traefik配置文件里面写对我个人来说方便。&lt;/li&gt;
&lt;/ol&gt;

那我现在怎么就用slb http  https代理方式了呢？

&lt;ol&gt;
  &lt;li&gt;当然了  首先是可以挂载多个证书了&lt;/li&gt;
  &lt;li&gt;我在slb上面直接绑定了泛域名，后面的具体域名解析还是在我的traefik配置。但是我不用绑定证书了….&lt;/li&gt;
  &lt;li&gt;http  https的方式我可以把日志直接写入他的cos对象存储和腾讯云自己的日志服务（感觉也是一个kibana）可以直接分析日志啊…..&lt;/li&gt;
&lt;/ol&gt;

&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/6bfbd82e0ccdf068eb7cb153e56167c2.png#align=left&amp;amp;display=inline&amp;amp;height=244&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=489&amp;amp;originWidth=1676&amp;amp;size=41701&amp;amp;status=done&amp;amp;style=none&amp;amp;width=838&quot; alt=&quot;image.png&quot; /&gt;
综上所述，来实现一下我个人的过程与思路

&lt;ol&gt;
  &lt;li&gt;创建slb .slb绑定 work节点 80端口(这里我用的是负载均衡型，没有用传统型)，没有问题吧？老老实实ipv4了没有启用ipv6这个就看个人具体需求吧。&lt;/li&gt;
&lt;/ol&gt;

&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3b31852d3b61b3f67201c75c397f1a1f.png#align=left&amp;amp;display=inline&amp;amp;height=374&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=748&amp;amp;originWidth=1275&amp;amp;size=65362&amp;amp;status=done&amp;amp;style=none&amp;amp;width=637.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/6f332352d5c769f347b398fa0ba50526.png#align=left&amp;amp;display=inline&amp;amp;height=278&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=556&amp;amp;originWidth=687&amp;amp;size=26931&amp;amp;status=done&amp;amp;style=none&amp;amp;width=343.5&quot; alt=&quot;image.png&quot; /&gt;
使用了极度不要脸的方式 泛域名….因为我常用的也就这两个域名，具体的解析都还是我自己在traefik配置了。
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/f6fadafaaf63151bad81749038136293.png#align=left&amp;amp;display=inline&amp;amp;height=267&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=534&amp;amp;originWidth=1450&amp;amp;size=34521&amp;amp;status=done&amp;amp;style=none&amp;amp;width=725&quot; alt=&quot;image.png&quot; /&gt;
关于证书 我这里可是扔好了 两个主二级域名，泛域名证书直接扔上了……
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/49422018f2f9b647fffc93c380925b53.png#align=left&amp;amp;display=inline&amp;amp;height=187&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=374&amp;amp;originWidth=1115&amp;amp;size=27298&amp;amp;status=done&amp;amp;style=none&amp;amp;width=557.5&quot; alt=&quot;image.png&quot; /&gt;
四个后面配置我都绑定了80交给traefik处理吧。权重我都设置的一样的，有其他需求的可以根据自己需要设置呢。
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/b7ebbe0745cec6af1f2958b0b46e927e.png#align=left&amp;amp;display=inline&amp;amp;height=258&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=516&amp;amp;originWidth=1376&amp;amp;size=42590&amp;amp;status=done&amp;amp;style=none&amp;amp;width=688&quot; alt=&quot;image.png&quot; /&gt;
&lt;h2 id=&quot;2-配置路由规则&quot;&gt;2. 配置路由规则&lt;/h2&gt;
Traefik 应用已经部署完成，并且和slb负载均衡集成也大致完成了。但是想让外部访问 Kubernetes 内部服务，还需要配置路由规则，上面部署 Traefik 时开启了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traefik dashboard&lt;/code&gt;，这是 Traefik 提供的视图看板，所以，首先配置基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traefik Dashboard&lt;/code&gt; 路由规则，使外部能够访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traefik Dashboard&lt;/code&gt;。这里分别使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRD&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ingress&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kubernetes Gateway API&lt;/code&gt; 三种方式进行演示，过去版本常用的是CRD的方式。https的方式我就忽略了交给slb负载均衡层了。
&lt;h3 id=&quot;1-crd方式&quot;&gt;1. CRD方式&lt;/h3&gt;
过去我个人部署应用都是crd方式，自己老把这种方式叫做ingressroute方式。

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF&amp;gt; traefik-dashboard-route-http.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard-route
  namespaces: kube-system
spec:
  entryPoints:
  - web
  routes:
  - match: Host(\`traefik.saynaihe.com\`)
    kind: Rule
    services:
      - name: traefik
        port: 8080
EOF
kubectl apply -f traefik-dashboard-route-http.yaml       
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/f27ea6bbe0da83127e697ed607f90444.png#align=left&amp;amp;display=inline&amp;amp;height=143&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=286&amp;amp;originWidth=770&amp;amp;size=23942&amp;amp;status=done&amp;amp;style=none&amp;amp;width=385&quot; alt=&quot;image.png&quot; /&gt;
关于   match: Host(`traefik.saynaihe.com`)  加转义符应该都能看明白了，不加转义符会是这样的
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/00bbe950a12cd3fc8316f24af0ba80b0.png#align=left&amp;amp;display=inline&amp;amp;height=284&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=567&amp;amp;originWidth=876&amp;amp;size=50579&amp;amp;status=done&amp;amp;style=none&amp;amp;width=438&quot; alt=&quot;image.png&quot; /&gt;
我貌似又忘了加namespace 截图中，实际我可是加上了…老容易往事。哎，我不是两个泛域名吗 ？ 特意做了两个ingressoute 做下测试
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3ee43493144ebb7ea5eaeeedf46dc043.png#align=left&amp;amp;display=inline&amp;amp;height=42&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=83&amp;amp;originWidth=749&amp;amp;size=8609&amp;amp;status=done&amp;amp;style=none&amp;amp;width=374.5&quot; alt=&quot;image.png&quot; /&gt;
然后绑定本地hosts绑定host
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Windows\System32\drivers\etc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/65953fe87d4996c00c229f6253570a80.png#align=left&amp;amp;display=inline&amp;amp;height=151&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=301&amp;amp;originWidth=1235&amp;amp;size=52169&amp;amp;status=done&amp;amp;style=none&amp;amp;width=617.5&quot; alt=&quot;image.png&quot; /&gt;
遮挡的有点多….但是 这就是两个都路由过来了啊
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ba6f31e52bb58c91b13126aa96237a89.png#align=left&amp;amp;display=inline&amp;amp;height=466&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=932&amp;amp;originWidth=1621&amp;amp;size=194469&amp;amp;status=done&amp;amp;style=none&amp;amp;width=810.5&quot; alt=&quot;image.png&quot; /&gt;
关于https可以忽略了直接挂载在slb层了啊。然后http 强制跳转 https也可以在slb层上面配置了
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/bfa2a2fc8af78e3d0dc6019ccd3cb16d.png#align=left&amp;amp;display=inline&amp;amp;height=342&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=683&amp;amp;originWidth=1523&amp;amp;size=111451&amp;amp;status=done&amp;amp;style=none&amp;amp;width=761.5&quot; alt=&quot;image.png&quot; /&gt;
流氓玩法强跳….测试也是成功的….
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/fe1db72829a2dc1602458e5d9069660f.png#align=left&amp;amp;display=inline&amp;amp;height=174&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=348&amp;amp;originWidth=1561&amp;amp;size=25364&amp;amp;status=done&amp;amp;style=none&amp;amp;width=780.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h3 id=&quot;2-ingress方式&quot;&gt;2. Ingress方式&lt;/h3&gt;
ingress的方式基本就是&lt;a href=&quot;https://kubernetes.io/zh/docs/concepts/services-networking/ingress/&quot;&gt;https://kubernetes.io/zh/docs/concepts/services-networking/ingress/&lt;/a&gt; kubernetes 常见的ingress方式吧？
继续拿dashboard做演示
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF&amp;gt; traefik-dashboard-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: traefik-dashboard-ingress
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: traefik  
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
  - host: traefik1.saynaihe.com
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: traefik
            port:
              number: 8080
EOF
kubectl apply -f traefik-dashboard-ingress.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/52a4e18ada84a2664d8ef5be4e7688ee.png#align=left&amp;amp;display=inline&amp;amp;height=228&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=456&amp;amp;originWidth=899&amp;amp;size=42553&amp;amp;status=done&amp;amp;style=none&amp;amp;width=449.5&quot; alt=&quot;image.png&quot; /&gt;
由于端口强制跳转了设置，直接https了哈哈哈验证完成
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/6cacdd9191ecfbb4298c2f129cf513c7.png#align=left&amp;amp;display=inline&amp;amp;height=444&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=888&amp;amp;originWidth=1627&amp;amp;size=121141&amp;amp;status=done&amp;amp;style=none&amp;amp;width=813.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h2 id=&quot;3方式三使用-kubernetes-gateway-api&quot;&gt;3、方式三：使用 Kubernetes Gateway API&lt;/h2&gt;
关于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kubernetes Gateway API&lt;/code&gt; 可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRD&lt;/code&gt; 方式创建路由规则
              CRD  自定义资源强调一下
    详情可以参考：&lt;a href=&quot;https://doc.traefik.io/traefik/v2.4/routing/providers/kubernetes-gateway/&quot;&gt;https://doc.traefik.io/traefik/v2.4/routing/providers/kubernetes-gateway/&lt;/a&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GatewayClass：&lt;/strong&gt; GatewayClass 是基础结构提供程序定义的群集范围的资源。此资源表示可以实例化的网关类。一般该资源是用于支持多个基础设施提供商用途的，这里我们只部署一个即可。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gateway：&lt;/strong&gt; Gateway 与基础设施配置的生命周期是 1:1。当用户创建网关时，GatewayClass 控制器会提供或配置一些负载平衡基础设施。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTTPRoute：&lt;/strong&gt; HTTPRoute 是一种网关 API 类型，用于指定 HTTP 请求从网关侦听器到 API 对象（即服务）的路由行为。&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/784984193bf45635c12225480a9d7133.png#align=left&amp;amp;display=inline&amp;amp;height=423&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=845&amp;amp;originWidth=1690&amp;amp;size=196554&amp;amp;status=done&amp;amp;style=none&amp;amp;width=845&quot; alt=&quot;image.png&quot; /&gt;
&lt;h3 id=&quot;1-创建-gatewayclass&quot;&gt;1. 创建 GatewayClass&lt;/h3&gt;
&lt;strong&gt;**#&lt;/strong&gt;创建 GatewayClass 资源 kubernetes-gatewayclass.yaml 文件**
**参照： **&lt;a href=&quot;https://doc.traefik.io/traefik/v2.4/routing/providers/kubernetes-gateway/#kind-gatewayclass&quot;&gt;https://doc.traefik.io/traefik/v2.4/routing/providers/kubernetes-gateway/#kind-gatewayclass&lt;/a&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF&amp;gt; kubernetes-gatewayclass.yaml
kind: GatewayClass
apiVersion: networking.x-k8s.io/v1alpha1
metadata:
  name: traefik
spec:
  # Controller is a domain/path string that indicates
  # the controller that is managing Gateways of this class.
  controller: traefik.io/gateway-controller
EOF
kubectl apply -f kubernetes-gatewayclass.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-配置-http-路由规则-traefik-dashboard-为例&quot;&gt;2 配置 HTTP 路由规则 （Traefik Dashboard 为例）&lt;/h3&gt;
&lt;strong&gt;创建 Gateway 资源 http-gateway.yaml 文件&lt;/strong&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF&amp;gt; http-gateway.yaml
apiVersion: networking.x-k8s.io/v1alpha1
kind: Gateway
metadata: 
  name: http-gateway
  namespace: kube-system
spec: 
  gatewayClassName: traefik
  listeners: 
    - protocol: HTTP
      port: 80
      routes: 
        kind: HTTPRoute
        namespaces:
          from: All
        selector:
          matchLabels:
            app: traefik
EOF
kubectl apply -f http-gateway.yaml            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;strong&gt;创建 HTTPRoute 资源 traefik-httproute.yaml 文件&lt;/strong&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF&amp;gt; traefik-httproute.yaml
apiVersion: networking.x-k8s.io/v1alpha1
kind: HTTPRoute
metadata:
  name: traefik-dashboard-httproute
  namespace: kube-system
  labels:
    app: traefik
spec:
  hostnames:
    - &quot;traefi2.saynaihe.com&quot;
  rules:
    - matches:
        - path:
            type: Prefix
            value: /
      forwardTo:
        - serviceName: traefik
          port: 8080
          weight: 1
EOF
kubectl apply -f traefik-httproute.yaml            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
这里就出问题了…..，无法访问，仔细看了下文档&lt;a href=&quot;https://doc.traefik.io/traefik/providers/kubernetes-gateway/&quot;&gt;https://doc.traefik.io/traefik/providers/kubernetes-gateway/&lt;/a&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/b6c18a95682a987fa06bcf07974404d5.png#align=left&amp;amp;display=inline&amp;amp;height=359&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=718&amp;amp;originWidth=1588&amp;amp;size=124387&amp;amp;status=done&amp;amp;style=none&amp;amp;width=794&quot; alt=&quot;image.png&quot; /&gt;
全部删除一次重新部署吧将2.5中版本变成v0.1.0就好了….图就不上了基本步骤是一样的。
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/04920fa7cf9f829c79d4c9224d390dc5.png#align=left&amp;amp;display=inline&amp;amp;height=412&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=823&amp;amp;originWidth=1570&amp;amp;size=104263&amp;amp;status=done&amp;amp;style=none&amp;amp;width=785&quot; alt=&quot;image.png&quot; /&gt;
注： 都没有做域名解析，本地绑定了host。 saynaihe.com域名只是做演示。没有实际搞….因为我没有做备案。现在不备案的基本绑上就被扫描到封了。用正式域名做的试验。另外养成的习惯用CRD习惯了…部署应用基本个人都用了CRD的方式  —ingressroute。ingress的方式是更适合从ingress-nginx迁移到traefik使用了。至于Kubernetes Gateway API个人还是图个新鲜，没有整明白。v0.2.0不能用…就演示下了.

</description>
        <pubDate>Sat, 27 Mar 2021 01:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/03/27/Kubernetes-traefik/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/03/27/Kubernetes-traefik/</guid>
        
        <category>kubernetes</category>
        
        <category>traefik</category>
        
        
        <category>kubernetes1.20</category>
        
      </item>
    
      <item>
        <title>Kuberentes集群添加腾讯云CBS为默认存储</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#前言&quot; id=&quot;markdown-toc-前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#初始环境&quot; id=&quot;markdown-toc-初始环境&quot;&gt;初始环境&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#集成腾讯云-cbs-csi&quot; id=&quot;markdown-toc-集成腾讯云-cbs-csi&quot;&gt;集成腾讯云 CBS CSI&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-clone-仓库&quot; id=&quot;markdown-toc-1-clone-仓库&quot;&gt;1. clone 仓库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2参照文档前置要求完成kubernetes集群的配置修改&quot; id=&quot;markdown-toc-2参照文档前置要求完成kubernetes集群的配置修改&quot;&gt;2.参照文档前置要求完成kubernetes集群的配置修改&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-master节点&quot; id=&quot;markdown-toc-1-master节点&quot;&gt;1. master节点&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-修改所有节点的kubelet配置&quot; id=&quot;markdown-toc-2-修改所有节点的kubelet配置&quot;&gt;2. 修改所有节点的kubelet配置&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3部署cbs-csi插件&quot; id=&quot;markdown-toc-3部署cbs-csi插件&quot;&gt;3.部署CBS CSI插件&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-使用腾讯云-api-credential-创建-kubernetes-secret&quot; id=&quot;markdown-toc-1-使用腾讯云-api-credential-创建-kubernetes-secret&quot;&gt;1. 使用腾讯云 API Credential 创建 kubernetes secret:&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-前提&quot; id=&quot;markdown-toc-1-前提&quot;&gt;1. 前提：&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-根据文档提示将secretid-secretkey-base64转换生成kubernetes-secret&quot; id=&quot;markdown-toc-2-根据文档提示将secretid-secretkey-base64转换生成kubernetes-secret&quot;&gt;2. 根据文档提示将SecretId SecretKey base64转换生成kubernetes secret&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-创建rbac&quot; id=&quot;markdown-toc-2-创建rbac&quot;&gt;2. 创建rbac&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3创建controllernode和plugin&quot; id=&quot;markdown-toc-3创建controllernode和plugin&quot;&gt;3.创建controller,node和plugin&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-验证&quot; id=&quot;markdown-toc-4-验证&quot;&gt;4. 验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
接上文&lt;a href=&quot;https://blog.csdn.net/saynaihe/article/details/115187298&quot;&gt;https://blog.csdn.net/saynaihe/article/details/115187298&lt;/a&gt; kubeadm  搭建高可用ha集群，接下来考虑的度量有存储，对外暴露服务。日志收集，监控报警几项。个人习惯就先将存储优先来讨论了。
关于存储storageclass
如&lt;a href=&quot;https://kubernetes.io/zh/docs/concepts/storage/storage-classes&quot;&gt;https://kubernetes.io/zh/docs/concepts/storage/storage-classes&lt;/a&gt;所示，常见的有很多类型,如下：
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/dde52dd300170764556021abdf4c2a46.png#align=left&amp;amp;display=inline&amp;amp;height=195&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=390&amp;amp;originWidth=248&amp;amp;size=11290&amp;amp;status=done&amp;amp;style=none&amp;amp;width=124&quot; alt=&quot;image.png&quot; /&gt;
由于我的集群建在公有云上面 腾讯云有开源的cbs 的 csi组件。在kubernetes1.16-1.18 环境使用docker 做runtime的环境中使用过腾讯云的开源组件。这就又拿来用了。方便集成。
&lt;h1 id=&quot;初始环境&quot;&gt;初始环境&lt;/h1&gt;
参加：&lt;a href=&quot;https://editor.csdn.net/md/?articleId=115187298&quot;&gt;https://editor.csdn.net/md/?articleId=115187298&lt;/a&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;主机名&lt;/th&gt;
      &lt;th&gt;ip&lt;/th&gt;
      &lt;th&gt;系统&lt;/th&gt;
      &lt;th&gt;内核&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sh-master-01&lt;/td&gt;
      &lt;td&gt;10.3.2.5&lt;/td&gt;
      &lt;td&gt;centos8&lt;/td&gt;
      &lt;td&gt;4.18.0-240.15.1.el8_3.x86_64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sh-master-02&lt;/td&gt;
      &lt;td&gt;10.3.2.13&lt;/td&gt;
      &lt;td&gt;centos8&lt;/td&gt;
      &lt;td&gt;4.18.0-240.15.1.el8_3.x86_64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sh-master-03&lt;/td&gt;
      &lt;td&gt;10.3.2.16&lt;/td&gt;
      &lt;td&gt;centos8&lt;/td&gt;
      &lt;td&gt;4.18.0-240.15.1.el8_3.x86_64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sh-work-01&lt;/td&gt;
      &lt;td&gt;10.3.2.2&lt;/td&gt;
      &lt;td&gt;centos8&lt;/td&gt;
      &lt;td&gt;4.18.0-240.15.1.el8_3.x86_64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sh-work-02&lt;/td&gt;
      &lt;td&gt;10.3.2.2&lt;/td&gt;
      &lt;td&gt;centos8&lt;/td&gt;
      &lt;td&gt;4.18.0-240.15.1.el8_3.x86_64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sh-work-03&lt;/td&gt;
      &lt;td&gt;10.3.2.4&lt;/td&gt;
      &lt;td&gt;centos8&lt;/td&gt;
      &lt;td&gt;4.18.0-240.15.1.el8_3.x86_64&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;集成腾讯云-cbs-csi&quot;&gt;集成腾讯云 CBS CSI&lt;/h1&gt;
&lt;h2 id=&quot;1-clone-仓库&quot;&gt;1. clone 仓库&lt;/h2&gt;
注： kubernetes-csi-tencentcloud中包括 CBS CSI，  CFS CSI 与 COSFS CSI。这里我就只用CBS块存储了。其他两个也用过，感觉用起来还是不太适合。
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/TencentCloud/kubernetes-csi-tencentcloud.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
各种名词可以参照：&lt;a href=&quot;https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_CBS_zhCN.md&quot;&gt;https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_CBS_zhCN.md&lt;/a&gt;。
&lt;h2 id=&quot;2参照文档前置要求完成kubernetes集群的配置修改&quot;&gt;2.参照文档前置要求完成kubernetes集群的配置修改&lt;/h2&gt;
&lt;h3 id=&quot;1-master节点&quot;&gt;1. master节点&lt;/h3&gt;
参照&lt;a href=&quot;https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_CBS_zhCN.md&quot;&gt;https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_CBS_zhCN.md&lt;/a&gt;。参照一下图片前置要求
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/4c103c1c600f27936fcb33428538261b.png#align=left&amp;amp;display=inline&amp;amp;height=339&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=678&amp;amp;originWidth=1240&amp;amp;size=96553&amp;amp;status=done&amp;amp;style=none&amp;amp;width=620&quot; alt=&quot;image.png&quot; /&gt;对三台master节点修改 kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml。增加如下配置（查看对应版本对应需求）
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; - --feature-gates=VolumeSnapshotDataSource=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/dc9d51d2d0935e29203a5e713bfe42fd.png#align=left&amp;amp;display=inline&amp;amp;height=246&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=491&amp;amp;originWidth=959&amp;amp;size=49878&amp;amp;status=done&amp;amp;style=none&amp;amp;width=479.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e78eb4b1ccc2d77a212eb399cc871c6a.png#align=left&amp;amp;display=inline&amp;amp;height=228&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=456&amp;amp;originWidth=963&amp;amp;size=45375&amp;amp;status=done&amp;amp;style=none&amp;amp;width=481.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/6c1c842b7db9cc48fb049cf7e5a5fcef.png#align=left&amp;amp;display=inline&amp;amp;height=224&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=448&amp;amp;originWidth=973&amp;amp;size=38729&amp;amp;status=done&amp;amp;style=none&amp;amp;width=486.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h3 id=&quot;2-修改所有节点的kubelet配置&quot;&gt;2. 修改所有节点的kubelet配置&lt;/h3&gt;
kubelet增加–feature-gates=VolumeSnapshotDataSource=true的支持
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/946f5d3fc28c66c4083fd747e3e236b9.png#align=left&amp;amp;display=inline&amp;amp;height=61&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=121&amp;amp;originWidth=1378&amp;amp;size=23031&amp;amp;status=done&amp;amp;style=none&amp;amp;width=689&quot; alt=&quot;image.png&quot; /&gt;
&lt;h1 id=&quot;3部署cbs-csi插件&quot;&gt;3.部署CBS CSI插件&lt;/h1&gt;
&lt;h2 id=&quot;1-使用腾讯云-api-credential-创建-kubernetes-secret&quot;&gt;1. 使用腾讯云 API Credential 创建 kubernetes secret:&lt;/h2&gt;
&lt;h3 id=&quot;1-前提&quot;&gt;1. 前提：&lt;/h3&gt;
首先的在腾讯云后台&lt;a href=&quot;https://console.cloud.tencent.com/cam&quot;&gt;https://console.cloud.tencent.com/cam&lt;/a&gt;创建一个用户，访问方式我是只开通了编程访问，至于用户权限则需要开通CBS相关权限。我是直接绑定了CSB两个默认相关的权限，还有财务付款权限，记得一定的支持付款，否则硬盘创建不了……。玩的好的可以自定义创建下权限，否则个人觉得财务权限貌似有点大……
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3f82e8ac162441cbbf7537c653ce10bd.png#align=left&amp;amp;display=inline&amp;amp;height=361&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=721&amp;amp;originWidth=1543&amp;amp;size=86001&amp;amp;status=done&amp;amp;style=none&amp;amp;width=771.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/282fe41f530152a3d7cdc76cc4fd4f87.png#align=left&amp;amp;display=inline&amp;amp;height=366&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=732&amp;amp;originWidth=1499&amp;amp;size=69960&amp;amp;status=done&amp;amp;style=none&amp;amp;width=749.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h3 id=&quot;2-根据文档提示将secretid-secretkey-base64转换生成kubernetes-secret&quot;&gt;2. 根据文档提示将SecretId SecretKey base64转换生成kubernetes secret&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo -n &quot;XXXXXXXXXXX&quot; |base6
 echo -n &quot;XXXXXXXXXX&quot; |base64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
将base64写入secret.yaml文件
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e3c1c9068c00392414904c077406c80a.png#align=left&amp;amp;display=inline&amp;amp;height=134&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=267&amp;amp;originWidth=977&amp;amp;size=27777&amp;amp;status=done&amp;amp;style=none&amp;amp;width=488.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /root/kubernetes-csi-tencentcloud-master/deploy/cbs/kubernetes
kubectl apply -f secret.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
注：&lt;strong&gt;项目是在root目录git clone的，故cd /root/kubernetes-csi-tencentcloud-master/deploy/cbs/kubernetes.包括一下没有特别强调目录的，都是在此目录下执行的&lt;/strong&gt;
&lt;strong&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3a0e231afbf7ef97d8cb52232b7aec61.png#align=left&amp;amp;display=inline&amp;amp;height=96&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=191&amp;amp;originWidth=1016&amp;amp;size=24729&amp;amp;status=done&amp;amp;style=none&amp;amp;width=508&quot; alt=&quot;image.png&quot; /&gt;&lt;/strong&gt;
&lt;h2 id=&quot;2-创建rbac&quot;&gt;2. 创建rbac&lt;/h2&gt;
创建attacher,provisioner,plugin需要的rbac：
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f  csi-controller-rbac.yaml
kubectl apply -f  csi-node-rbac.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;3创建controllernode和plugin&quot;&gt;3.创建controller,node和plugin&lt;/h2&gt;
创建controller plugin和node plugin
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f  csi-controller.yaml
kubectl apply -f  csi-node.yaml
### snapshot-crd我没有使用，字面意思应该是快照的....
kubectl apply -f  snapshot-crd.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
kubectl get pods -n kube-system 可以看到cbs-csi相关组件创建ing：
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/836c21097717eca14a6d8dae352b4041.png#align=left&amp;amp;display=inline&amp;amp;height=309&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=617&amp;amp;originWidth=839&amp;amp;size=81252&amp;amp;status=done&amp;amp;style=none&amp;amp;width=419.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h1 id=&quot;4-验证&quot;&gt;4. 验证&lt;/h1&gt;
切换目录
cd   /root/kubernetes-csi-tencentcloud-master/deploy/cbs/examples

&lt;ol&gt;
  &lt;li&gt;参照storageclass参数修改storageclass-basic.yaml&lt;/li&gt;
&lt;/ol&gt;

&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ab44a5b4369a95c7f811151097aeb55f.png#align=left&amp;amp;display=inline&amp;amp;height=253&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=505&amp;amp;originWidth=1333&amp;amp;size=125348&amp;amp;status=done&amp;amp;style=none&amp;amp;width=666.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;创建storageclass:
    kubectl apply -f  storageclass-basic.yaml
创建pvc:
    kubectl apply -f  pvc.yaml
创建申请pvc的pod:
    kubectl apply -f  app.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/0f4a3e380a819f4cfd26acb0d635a0f3.png#align=left&amp;amp;display=inline&amp;amp;height=279&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=557&amp;amp;originWidth=888&amp;amp;size=67805&amp;amp;status=done&amp;amp;style=none&amp;amp;width=444&quot; alt=&quot;image.png&quot; /&gt;
嗯 kubectl get storageclass&lt;br /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/62f3a38e2aeb7d960661bdb0ffd246c5.png#align=left&amp;amp;display=inline&amp;amp;height=44&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=87&amp;amp;originWidth=1217&amp;amp;size=12553&amp;amp;status=done&amp;amp;style=none&amp;amp;width=608.5&quot; alt=&quot;image.png&quot; /&gt;
到此为止，搭建其他应用就可以用cbs存储了。具体参数看文档  看文档 看文档  说三遍。
</description>
        <pubDate>Sat, 27 Mar 2021 01:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/03/27/Kuberentes-cbs/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/03/27/Kuberentes-cbs/</guid>
        
        <category>kubernetes</category>
        
        <category>CBS</category>
        
        
        <category>kubernetes1.20</category>
        
      </item>
    
      <item>
        <title>centos8+kubeadm1.20.5+cilium+hubble环境搭建</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#前言&quot; id=&quot;markdown-toc-前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#环境准备&quot; id=&quot;markdown-toc-环境准备&quot;&gt;环境准备：&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-系统初始化&quot; id=&quot;markdown-toc-1-系统初始化&quot;&gt;1. 系统初始化：&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-更改主机名&quot; id=&quot;markdown-toc-1-更改主机名&quot;&gt;1. 更改主机名&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-关闭swap交换分区&quot; id=&quot;markdown-toc-2-关闭swap交换分区&quot;&gt;2. 关闭swap交换分区&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-关闭selinux&quot; id=&quot;markdown-toc-3-关闭selinux&quot;&gt;3. 关闭selinux&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-关闭防火墙&quot; id=&quot;markdown-toc-4-关闭防火墙&quot;&gt;4. 关闭防火墙&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-调整文件打开数等配置&quot; id=&quot;markdown-toc-5-调整文件打开数等配置&quot;&gt;5. 调整文件打开数等配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-yum--update-八仙过海各显神通吧安装自己所需的习惯的应用&quot; id=&quot;markdown-toc-6-yum--update-八仙过海各显神通吧安装自己所需的习惯的应用&quot;&gt;6. yum  update 八仙过海各显神通吧，安装自己所需的习惯的应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7-ipvs添加centos8内核默认418内核419不包括419的是用这个&quot; id=&quot;markdown-toc-7-ipvs添加centos8内核默认418内核419不包括419的是用这个&quot;&gt;7. ipvs添加（centos8内核默认4.18.内核4.19不包括4.19的是用这个）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#8-优化系统参数不一定是最优各取所有&quot; id=&quot;markdown-toc-8-优化系统参数不一定是最优各取所有&quot;&gt;8. 优化系统参数(不一定是最优，各取所有)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#9-containerd安装&quot; id=&quot;markdown-toc-9-containerd安装&quot;&gt;9. containerd安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#10-配置-cri-客户端-crictl&quot; id=&quot;markdown-toc-10-配置-cri-客户端-crictl&quot;&gt;10. 配置 CRI 客户端 crictl&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#11-安装-kubeadmcentos8没有对应yum源使用centos7的阿里云yum源&quot; id=&quot;markdown-toc-11-安装-kubeadmcentos8没有对应yum源使用centos7的阿里云yum源&quot;&gt;11. 安装 Kubeadm(centos8没有对应yum源使用centos7的阿里云yum源)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-修改kubelet配置&quot; id=&quot;markdown-toc-12-修改kubelet配置&quot;&gt;12. 修改kubelet配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13--journal-日志相关避免日志重复搜集浪费系统资源修改systemctl启动的最小文件打开数量关闭ssh反向dns解析设置清理日志最大200m可根据个人需求设置&quot; id=&quot;markdown-toc-13--journal-日志相关避免日志重复搜集浪费系统资源修改systemctl启动的最小文件打开数量关闭ssh反向dns解析设置清理日志最大200m可根据个人需求设置&quot;&gt;13 . journal 日志相关避免日志重复搜集，浪费系统资源。修改systemctl启动的最小文件打开数量,关闭ssh反向dns解析.设置清理日志，最大200m(可根据个人需求设置)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-master节点操作&quot; id=&quot;markdown-toc-2-master节点操作&quot;&gt;2. master节点操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1--安装haproxy&quot; id=&quot;markdown-toc-1--安装haproxy&quot;&gt;1 . 安装haproxy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-sh-master-01节点初始化&quot; id=&quot;markdown-toc-2-sh-master-01节点初始化&quot;&gt;2. sh-master-01节点初始化&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1生成config配置文件&quot; id=&quot;markdown-toc-1生成config配置文件&quot;&gt;1.生成config配置文件&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-修改kubeadm初始化文件&quot; id=&quot;markdown-toc-2-修改kubeadm初始化文件&quot;&gt;2. 修改kubeadm初始化文件&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-kubeadm-master-01节点初始化屏蔽kube-proxy&quot; id=&quot;markdown-toc-3-kubeadm-master-01节点初始化屏蔽kube-proxy&quot;&gt;3. kubeadm master-01节点初始化（屏蔽kube-proxy）。&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-helm-安装-部署cilium-与hubble默认helm3了&quot; id=&quot;markdown-toc-3-helm-安装-部署cilium-与hubble默认helm3了&quot;&gt;3. helm 安装 部署cilium 与hubble(默认helm3了)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-下载helm并安装helm&quot; id=&quot;markdown-toc-1-下载helm并安装helm&quot;&gt;1. 下载helm并安装helm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2--helm-安装cilium-hubble&quot; id=&quot;markdown-toc-2--helm-安装cilium-hubble&quot;&gt;2 . helm 安装cilium hubble&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-work节点部署&quot; id=&quot;markdown-toc-4-work节点部署&quot;&gt;4. work节点部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
腾讯云绑定用户，开始使用过腾讯云的tke1.10版本。鉴于各种原因选择了自建。线上kubeadm自建kubernetes集群1.16版本（小版本升级到1.16.15）。kubeadm+haproxy+slb+flannel搭建高可用集群，集群启用ipvs。对外服务使用slb绑定traefik tcp 80  443端口对外映射（这是历史遗留问题，过去腾讯云slb不支持挂载多证书，这样也造成了无法使用slb的日志投递功能，现在slb已经支持了多证书的挂载，可以直接使用http http方式了）。生产环境当时搭建仓库没有使用腾讯云的块存储，直接使用cbs。直接用了local disk,还有nfs的共享存储。前几天整了个项目的压力测试，然后使用nfs存储的项目IO直接就飙升了。生产环境不建议使用。准备安装kubernetes 1.20版本，并使用cilium组网。hubble替代kube-proxy 体验一下ebpf。另外也直接上containerd。dockershim的方式确实也浪费资源的。这样也是可以减少资源开销，部署速度的。反正就是体验一下各种最新功能：
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/7b1e4478c35beb59c94356c0fe860813.png#align=left&amp;amp;display=inline&amp;amp;height=404&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=808&amp;amp;originWidth=816&amp;amp;size=214004&amp;amp;status=done&amp;amp;style=none&amp;amp;width=408&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/8501dd6e6766bdbf93a7b960627c0ba7.png#align=left&amp;amp;display=inline&amp;amp;height=168&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=336&amp;amp;originWidth=782&amp;amp;size=57458&amp;amp;status=done&amp;amp;style=none&amp;amp;width=391&quot; alt=&quot;image.png&quot; /&gt;
图片引用自：&lt;a href=&quot;https://blog.kelu.org/tech/2020/10/09/the-diff-between-docker-containerd-runc-docker-shim.html&quot;&gt;https://blog.kelu.org/tech/2020/10/09/the-diff-between-docker-containerd-runc-docker-shim.html&lt;/a&gt;
&lt;h1 id=&quot;环境准备&quot;&gt;环境准备：&lt;/h1&gt;
注：master节点4核心8G配置。work节点16核32G。腾讯云S5云主机
| 主机名 | ip | 系统 | 内核 |
| — | — | — | — |
| sh-master-01 | 10.3.2.5  | centos8 | 4.18.0-240.15.1.el8_3.x86_64 |
| sh-master-02 | 10.3.2.13 | centos8 | 4.18.0-240.15.1.el8_3.x86_64 |
| sh-master-03 | 10.3.2.16 | centos8 | 4.18.0-240.15.1.el8_3.x86_64 |
| sh-work-01 | 10.3.2.2 | centos8 | 4.18.0-240.15.1.el8_3.x86_64 |
| sh-work-02 | 10.3.2.3 | centos8 | 4.18.0-240.15.1.el8_3.x86_64 |
| sh-work-03 | 10.3.2.4 | centos8 | 4.18.0-240.15.1.el8_3.x86_64 |

注： 用centos8是为了懒升级内核版本了。centos7内核版本3.10确实有些老了。但是同样的centos8 kubernetes源是没有的，只能使用centos7的源。
VIP  slb地址：10.3.2.12（因为内网没有使用域名的需求，直接用了传统型内网负载，为了让slb映射端口与本地端口一样中间加了一层haproxy代理本地6443.然后slb代理8443端口为6443.）。
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/bb980270732f984faf857bec80061fd3.png#align=left&amp;amp;display=inline&amp;amp;height=236&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=472&amp;amp;originWidth=550&amp;amp;size=22601&amp;amp;status=done&amp;amp;style=none&amp;amp;width=275&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/2a8c7c5c02c6326fb072b2b80ce7cb7f.png#align=left&amp;amp;display=inline&amp;amp;height=416&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=831&amp;amp;originWidth=1210&amp;amp;size=55052&amp;amp;status=done&amp;amp;style=none&amp;amp;width=605&quot; alt=&quot;image.png&quot; /&gt;
&lt;h1 id=&quot;1-系统初始化&quot;&gt;1. 系统初始化：&lt;/h1&gt;
注：由于环境是部署在公有云的，使用了懒人方法。直接初始化了一台server.然后其他的直接都是复制的方式搭建的。
&lt;h2 id=&quot;1-更改主机名&quot;&gt;1. 更改主机名&lt;/h2&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hostnamectl set-hostname sh-master-01
cat /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/9c6027a9982a8d069d6e323cd5f70a46.png#align=left&amp;amp;display=inline&amp;amp;height=81&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=161&amp;amp;originWidth=1118&amp;amp;size=16245&amp;amp;status=done&amp;amp;style=none&amp;amp;width=559&quot; alt=&quot;image.png&quot; /&gt;
就是举个例子了。我的host文件只在三台master节点写了，work节点都没有写的…….

&lt;h2 id=&quot;2-关闭swap交换分区&quot;&gt;2. 关闭swap交换分区&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swapoff -a
sed -i 's/.*swap.*/#&amp;amp;/' /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-关闭selinux&quot;&gt;3. 关闭selinux&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setenforce  0 
sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/sysconfig/selinux 
sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config 
sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/sysconfig/selinux 
sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-关闭防火墙&quot;&gt;4. 关闭防火墙&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl disable --now firewalld
chkconfig firewalld off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;5-调整文件打开数等配置&quot;&gt;5. 调整文件打开数等配置&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat&amp;gt; /etc/security/limits.conf &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;soft&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nproc&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1000000&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hard&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nproc&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1000000&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;soft&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nofile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1000000&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hard&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nofile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1000000&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;soft&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;memlock&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;unlimited&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hard&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;memlock&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;unlimited&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
当然了这里最好的其实是/etc/security/limits.d目录下生成一个新的配置文件。避免修改原来的总配置文件、这也是推荐使用的方式。
&lt;h2 id=&quot;6-yum--update-八仙过海各显神通吧安装自己所需的习惯的应用&quot;&gt;6. yum  update 八仙过海各显神通吧，安装自己所需的习惯的应用&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
yum -y install  gcc bc gcc-c++ ncurses ncurses-devel cmake elfutils-libelf-devel openssl-devel flex* bison* autoconf automake zlib* fiex* libxml* ncurses-devel libmcrypt* libtool-ltdl-devel* make cmake  pcre pcre-devel openssl openssl-devel   jemalloc-devel tlc libtool vim unzip wget lrzsz bash-comp* ipvsadm ipset jq sysstat conntrack libseccomp conntrack-tools socat curl wget git conntrack-tools psmisc nfs-utils tree bash-completion conntrack libseccomp net-tools crontabs sysstat iftop nload strace bind-utils tcpdump htop telnet lsof
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;7-ipvs添加centos8内核默认418内核419不包括419的是用这个&quot;&gt;7. ipvs添加（centos8内核默认4.18.内核4.19不包括4.19的是用这个）&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:&amp;gt; /etc/modules-load.d/ipvs.conf
module=(
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
br_netfilter
  )
for kernel_module in ${module[@]};do
    /sbin/modinfo -F filename $kernel_module |&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; grep -qv ERROR &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo $kernel_module &amp;gt;&amp;gt; /etc/modules-load.d/ipvs.conf || :
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

内核大于等于4.19的
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:&amp;gt; /etc/modules-load.d/ipvs.conf
module=(
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
nf_conntrack
br_netfilter
  )
for kernel_module in ${module[@]};do
    /sbin/modinfo -F filename $kernel_module |&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; grep -qv ERROR &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo $kernel_module &amp;gt;&amp;gt; /etc/modules-load.d/ipvs.conf || :
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
这个地方我想我开不开ipvs应该没有多大关系了吧？ 因为我网络组件用的cilium  hubble。网络用的是ebpf。没有用iptables  ipvs吧？至于配置ipvs算是原来部署养成的习惯
加载ipvs模块
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl enable --now systemd-modules-load.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

查询ipvs是否加载
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#  lsmod | grep ip_vs
ip_vs_sh               16384  0
ip_vs_wrr              16384  0
ip_vs_rr               16384  0
ip_vs                 172032  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr
nf_conntrack          172032  6 xt_conntrack,nf_nat,xt_state,ipt_MASQUERADE,xt_CT,ip_vs
nf_defrag_ipv6         20480  4 nf_conntrack,xt_socket,xt_TPROXY,ip_vs
libcrc32c              16384  3 nf_conntrack,nf_nat,ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;8-优化系统参数不一定是最优各取所有&quot;&gt;8. 优化系统参数(不一定是最优，各取所有)&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; /etc/sysctl.d/k8s.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.neigh.default.gc_stale_time = 120
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
net.ipv4.ip_forward = 1
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 1024
net.ipv4.tcp_synack_retries = 2
# 要求iptables不对bridge的数据进行处理
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-arptables = 1
net.netfilter.nf_conntrack_max = 2310720
fs.inotify.max_user_watches=89100
fs.may_detach_mounts = 1
fs.file-max = 52706963
fs.nr_open = 52706963
vm.overcommit_memory=1
vm.panic_on_oom=0
vm.swappiness = 0
EOF

sysctl --system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;9-containerd安装&quot;&gt;9. containerd安装&lt;/h2&gt;
dnf  与yum  centos8的变化，具体的自己去看了呢。差不多吧…….
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dnf install dnf-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
sudo yum update -y &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo yum install -y containerd.io
containerd config default &amp;gt; /etc/containerd/config.toml
# 替换 containerd 默认的 sand_box 镜像，编辑 /etc/containerd/config.toml

sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;

# 重启containerd
$ systemctl daemon-reload
$ systemctl restart containerd

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
其他的配置一个是启用SystemdCgroup另外一个是添加了本地镜像库，账号密码（直接使用了腾讯云的仓库）。
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/0a5572f643ca79030fb0fb5cf7fa8bff.png#align=left&amp;amp;display=inline&amp;amp;height=241&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=482&amp;amp;originWidth=941&amp;amp;size=56294&amp;amp;status=done&amp;amp;style=none&amp;amp;width=470.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h2 id=&quot;10-配置-cri-客户端-crictl&quot;&gt;10. 配置 CRI 客户端 crictl&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; /etc/crictl.yaml
runtime-endpoint: unix:///run/containerd/containerd.sock
image-endpoint: unix:///run/containerd/containerd.sock
timeout: 10
debug: false
EOF

# 验证是否可用（可以顺便验证一下私有仓库）
crictl  pull nginx:alpine
crictl  rmi  nginx:alpine
crictl  images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;11-安装-kubeadmcentos8没有对应yum源使用centos7的阿里云yum源&quot;&gt;11. 安装 Kubeadm(centos8没有对应yum源使用centos7的阿里云yum源)&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
# 删除旧版本，如果安装了
yum remove kubeadm kubectl kubelet kubernetes-cni cri-tools socat 
# 查看所有可安装版本 下面两个都可以啊
# yum list --showduplicates kubeadm --disableexcludes=kubernetes
# 安装指定版本用下面的命令
# yum -y install kubeadm-1.20.5 kubectl-1.20.5 kubelet-1.20.5
or 
# yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

# 默认安装最新稳定版，当前版本1.20.5
yum install kubeadm

# 开机自启
systemctl enable kubelet.service

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;12-修改kubelet配置&quot;&gt;12. 修改kubelet配置&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/sysconfig/kubelet
KUBELET_EXTRA_ARGS= --cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint=/run/containerd/containerd.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;13--journal-日志相关避免日志重复搜集浪费系统资源修改systemctl启动的最小文件打开数量关闭ssh反向dns解析设置清理日志最大200m可根据个人需求设置&quot;&gt;13 . journal 日志相关避免日志重复搜集，浪费系统资源。修改systemctl启动的最小文件打开数量,关闭ssh反向dns解析.设置清理日志，最大200m(可根据个人需求设置)&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed -ri 's/^\$ModLoad imjournal/#&amp;amp;/' /etc/rsyslog.conf
sed -ri 's/^\$IMJournalStateFile/#&amp;amp;/' /etc/rsyslog.conf
sed -ri 's/^#(DefaultLimitCORE)=/\1=100000/' /etc/systemd/system.conf
sed -ri 's/^#(DefaultLimitNOFILE)=/\1=100000/' /etc/systemd/system.conf
sed -ri 's/^#(UseDNS )yes/\1no/' /etc/ssh/sshd_config
journalctl --vacuum-size=200M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-master节点操作&quot;&gt;2. master节点操作&lt;/h1&gt;
&lt;h2 id=&quot;1--安装haproxy&quot;&gt;1 . 安装haproxy&lt;/h2&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install haproxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  /etc/haproxy/haproxy.cfg
#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    tcp
    log                     global
    option                  tcplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend kubernetes
    bind *:8443              #配置端口为8443
    mode tcp
    default_backend kubernetes
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend kubernetes           #后端服务器，也就是说访问10.3.2.12:6443会将请求转发到后端的三台，这样就实现了负载均衡
    balance roundrobin               
    server master1  10.3.2.5:6443 check maxconn 2000
    server master2  10.3.2.13:6443 check maxconn 2000
    server master3  10.3.2.16:6443 check maxconn 2000
EOF
 systemctl enable haproxy &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl start haproxy &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl status haproxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

嗯 slb绑定端口
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e530a86097215a4e70c71a52de871eea.png#align=left&amp;amp;display=inline&amp;amp;height=347&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=693&amp;amp;originWidth=1473&amp;amp;size=53528&amp;amp;status=done&amp;amp;style=none&amp;amp;width=736.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h2 id=&quot;2-sh-master-01节点初始化&quot;&gt;2. sh-master-01节点初始化&lt;/h2&gt;
&lt;h3 id=&quot;1生成config配置文件&quot;&gt;1.生成config配置文件&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm config print init-defaults &amp;gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
下面的图就是举个例子…….
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/1ad4d7b5478c6f2ec8f9002d3c1186ca.png#align=left&amp;amp;display=inline&amp;amp;height=314&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=628&amp;amp;originWidth=1549&amp;amp;size=65445&amp;amp;status=done&amp;amp;style=none&amp;amp;width=774.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h3 id=&quot;2-修改kubeadm初始化文件&quot;&gt;2. 修改kubeadm初始化文件&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: abcdef.0123456789abcdef
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 10.3.2.5
  bindPort: 6443
nodeRegistration:
  criSocket: /run/containerd/containerd.sock
  name: sh-master-01
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiServer:
  timeoutForControlPlane: 4m0s
  certSANs:
  - sh-master-01
  - sh-master-02
  - sh-master-03
  - sh-master.k8s.io
  - localhost
  - 127.0.0.1
  - 10.3.2.5
  - 10.3.2.13
  - 10.3.2.16
  - 10.3.2.12
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controlPlaneEndpoint: &quot;10.3.2.12:6443&quot;
controllerManager: {}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: registry.aliyuncs.com/google_containers
kind: ClusterConfiguration
kubernetesVersion: v1.20.5
networking:
  dnsDomain: xx.daemon
  serviceSubnet: 172.254.0.0/16
  podSubnet: 172.3.0.0/16
scheduler: {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
修改的地方在下图中做了标识
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/6704923aff5211e9f6abbaef7dcfb405.png#align=left&amp;amp;display=inline&amp;amp;height=401&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=801&amp;amp;originWidth=1461&amp;amp;size=79487&amp;amp;status=done&amp;amp;style=none&amp;amp;width=730.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;h3 id=&quot;3-kubeadm-master-01节点初始化屏蔽kube-proxy&quot;&gt;3. kubeadm master-01节点初始化（屏蔽kube-proxy）。&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm init --skip-phases=addon/kube-proxy --config=config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
安装成功截图就忽略了，后写的笔记没有保存截图。成功的日志中包含
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p $HOME/.kube
mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

按照输出sh-master-02 ，sh-master-03节点加入集群
将sh-master-01 /etc/kubernetes/pki目录下ca.* sa.* front-proxy-ca.* etcd/ca* 打包分发到sh-master-02,sh-master-03 /etc/kubernetes/pki目录下 
kubeadm join 10.3.2.12:6443 --token abcdef.0123456789abcdef     --discovery-token-ca-cert-hash sha256:eb0fe00b59fa27f82c62c91def14ba294f838cd0731c91d0d9c619fe781286b6     --control-plane
然后同sh-master-01一样执行一遍下面的命令：
mkdir -p $HOME/.kube
sudo \cp /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-helm-安装-部署cilium-与hubble默认helm3了&quot;&gt;3. helm 安装 部署cilium 与hubble(默认helm3了)&lt;/h1&gt;
&lt;h2 id=&quot;1-下载helm并安装helm&quot;&gt;1. 下载helm并安装helm&lt;/h2&gt;
注： 由于网络原因。下载helm安装包下载不动经常，直接github下载到本地了
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/efff9f32fe36c47fb54983fdb90e143f.png#align=left&amp;amp;display=inline&amp;amp;height=453&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=906&amp;amp;originWidth=1504&amp;amp;size=124812&amp;amp;status=done&amp;amp;style=none&amp;amp;width=752&quot; alt=&quot;image.png&quot; /&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar zxvf helm-v3.5.3-linux-amd64.tar.gz 
cp helm /usr/bin/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;2--helm-安装cilium-hubble&quot;&gt;2 . helm 安装cilium hubble&lt;/h2&gt;
早先版本 cilium 与hubble是分开的现在貌似都集成了一波流走一遍：
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm install cilium cilium/cilium --version 1.9.5
--namespace kube-system
--set nodeinit.enabled=true
--set externalIPs.enabled=true
--set nodePort.enabled=true
--set hostPort.enabled=true
--set pullPolicy=IfNotPresent
--set config.ipam=cluster-pool
--set hubble.enabled=true
--set hubble.listenAddress=&quot;:4244&quot;
--set hubble.relay.enabled=true
--set hubble.metrics.enabled=&quot;{dns,drop,tcp,flow,port-distribution,icmp,http}&quot;
--set prometheus.enabled=true
--set peratorPrometheus.enabled=true
--set hubble.ui.enabled=true
--set kubeProxyReplacement=strict
--set k8sServiceHost=10.3.2.12
--set k8sServicePort=6443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
部署成功就是这样的
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/50bc9d6e6dbf7d1216ce4788fb073a4f.png#align=left&amp;amp;display=inline&amp;amp;height=35&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=70&amp;amp;originWidth=1379&amp;amp;size=10597&amp;amp;status=done&amp;amp;style=none&amp;amp;width=689.5&quot; alt=&quot;image.png&quot; /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/8ccf1c18b6d56b745c022252fbd2485f.png#align=left&amp;amp;display=inline&amp;amp;height=262&amp;amp;margin=[objectObject]&amp;amp;name=image.png&amp;amp;originHeight=523&amp;amp;originWidth=1139&amp;amp;size=69949&amp;amp;status=done&amp;amp;style=none&amp;amp;width=569.5&quot; alt=&quot;image.png&quot; /&gt;
嗯 木有kube-proxy的（截图是work加点加入后的故node-init  cilium pod都有6个）
&lt;h1 id=&quot;4-work节点部署&quot;&gt;4. work节点部署&lt;/h1&gt;
sh-work-01 sh-work-02 sh-work-03节点加入集群
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm join 10.3.2.12:6443 --token abcdef.0123456789abcdef     --discovery-token-ca-cert-hash sha256:eb0fe00b59fa27f82c62c91def14ba294f838cd0731c91d0d9c619fe781286b6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 26 Mar 2021 01:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/03/26/centos8+kubeadm1.20.5+cilium+hubble/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/03/26/centos8+kubeadm1.20.5+cilium+hubble/</guid>
        
        <category>kubernetes</category>
        
        <category>cilium</category>
        
        <category>hubble</category>
        
        
        <category>kubernetes1.20</category>
        
      </item>
    
      <item>
        <title>2020-07-31-kubernetes集群使用腾讯云cos存储</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#背景&quot; id=&quot;markdown-toc-背景&quot;&gt;背景&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一git-clone-仓库&quot; id=&quot;markdown-toc-一git-clone-仓库&quot;&gt;一.git clone 仓库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#二-kubernets集群更改配置&quot; id=&quot;markdown-toc-二-kubernets集群更改配置&quot;&gt;二. kubernets集群更改配置&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

集群配置：
centos7.7 64位

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ip&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;主机名&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.20&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vip&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.27&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.46&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.47&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.14&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.13&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-05&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;blockquote&gt;
  环境为kubernets集群1.18.6，参照 https://duiniwukenaihe.github.io/2020/07/22/tencent-slb-kubeadm-ha/在腾讯云上搭建。参照https://duiniwukenaihe.github.io/2020/07/23/kubernetes-csi-tencentcloud-cbs/完成 cbs云硬盘块存储集成。现在想把cos作为存储试一下。
&lt;/blockquote&gt;

&lt;h4 id=&quot;一git-clone-仓库&quot;&gt;一.git clone 仓库&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/TencentCloud/kubernetes-csi-tencentcloud
现在github会非常卡你懂的，最好还是国外服务器下载了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;二-kubernets集群更改配置&quot;&gt;二. kubernets集群更改配置&lt;/h4&gt;

&lt;blockquote&gt;
  参照https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_COSFS.md，我的kubernets集群是1.18.6。按照https://github.com/TencentCloud/kubernetes-csi-tencentcloud/edit/master/docs/README_CBS_zhCN.md的前置特性KubeletPluginsWatcher支持到1.12 我就不去考虑了。如下：
&lt;/blockquote&gt;

&lt;strong&gt;注意&lt;/strong&gt;:

在讲述&lt;strong&gt;前置要求&lt;/strong&gt;之前，对于各组件设置参数启动项有些要注意的地方：
&lt;ul&gt;
  &lt;li&gt;有些feature gates在GA以后的版本不能再被显式设置，否则可能导致报错。实际上这些feature gates在beta版本开始则无需添加。下表整理了涉及到feature gates的beta版本的表格，在给kubelet、master/controllermanager、scheduler设置启动参数时，可以基于此来做取舍.（举例：KubeletPluginsWatcher在1.12及以上版本则无须添加）。&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;阶段&lt;/th&gt;
      &lt;th&gt;起始&lt;/th&gt;
      &lt;th&gt;直到&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VolumeSnapshotDataSource&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Beta&lt;/td&gt;
      &lt;td&gt;1.17&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSINodeInfo&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Beta&lt;/td&gt;
      &lt;td&gt;1.14&lt;/td&gt;
      &lt;td&gt;1.16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSIDriverRegistry&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Beta&lt;/td&gt;
      &lt;td&gt;1.14&lt;/td&gt;
      &lt;td&gt;1.17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KubeletPluginsWatcher&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Beta&lt;/td&gt;
      &lt;td&gt;1.12&lt;/td&gt;
      &lt;td&gt;1.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VolumeScheduling&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Beta&lt;/td&gt;
      &lt;td&gt;1.10&lt;/td&gt;
      &lt;td&gt;1.12&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/31/kubernetes-csi-tencentcloud-cosfs/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/31/kubernetes-csi-tencentcloud-cosfs/</guid>
        
        <category>kubernetes1.18.6</category>
        
        <category>kubernetes-csi-tencentcloud</category>
        
        <category>cosfs</category>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>2020-07-27-kubernets-traefik</title>
        <description></description>
        <pubDate>Mon, 27 Jul 2020 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/27/kubernets-traefik/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/27/kubernets-traefik/</guid>
        
        <category>kubernetes1.16.8</category>
        
        <category>traefik</category>
        
        <category>Ingress</category>
        
        <category>controller</category>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>2020-07-23-qestion-etcd(error execution phase check-etcd)</title>
        <description></description>
        <pubDate>Thu, 23 Jul 2020 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/23/kubernetes-question-etcd/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/23/kubernetes-question-etcd/</guid>
        
        <category>kubernetes1.16.8</category>
        
        <category>etcd</category>
        
        <category>check-etcd</category>
        
        <category>etcd</category>
        
        <category>监控检查失败</category>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>2020-07-23-kubernetes集群使用腾讯云cbs块存储</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#背景&quot; id=&quot;markdown-toc-背景&quot;&gt;背景&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1git-clone-仓库&quot; id=&quot;markdown-toc-1git-clone-仓库&quot;&gt;1.git clone 仓库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-kubernets集群更改配置&quot; id=&quot;markdown-toc-2-kubernets集群更改配置&quot;&gt;2. kubernets集群更改配置&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

集群配置：
centos7.7 64位

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ip&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;主机名&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.20&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vip&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.27&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.46&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.47&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.14&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10.0.4.13&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-05&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;blockquote&gt;
  环境为kubernets集群1.18.6，参照 https://duiniwukenaihe.github.io/2020/07/22/tencent-slb-kubeadm-ha/在腾讯云上搭建。过去自己搭建过rook-ceph但是版本升级或者节点挂掉出现了各种问题，而且ceph的规划什么的 自己也掌握的不好，正好有腾讯云自己开源的kubernetes-csi-tencentcloud组件 就准备使用他集成做kubernets集群的默认storageclass了。
&lt;/blockquote&gt;

&lt;h4 id=&quot;1git-clone-仓库&quot;&gt;1.git clone 仓库&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/TencentCloud/kubernetes-csi-tencentcloud
现在github会非常卡你懂的，最好还是国外服务器下载了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;2-kubernets集群更改配置&quot;&gt;2. kubernets集群更改配置&lt;/h4&gt;
&lt;blockquote&gt;
  参照https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_CBS_zhCN.md，我的kubernets集群是1.18.6。
按照显性设置版本要求在kubelet apiserver  controller-manager scheduler 配置文件添加–feature-gates=VolumeSnapshotDataSource=true配置：

&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/kubernetes/manifests,修改三个master的  apiserver controller  scheduler配置文件如下：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;img src=&quot;/assets/images/2020/07/kubernetes-csi-tencentcloud/kube-api.png&quot; alt=&quot;kube-api&quot; /&gt;
&lt;img src=&quot;/assets/images/2020/07/kubernetes-csi-tencentcloud/kube-controller-manager.png&quot; alt=&quot;kube-controller-manager&quot; /&gt;
&lt;img src=&quot;/assets/images/2020/07/kubernetes-csi-tencentcloud/kube-scheduler.png&quot; alt=&quot;kube-scheduler&quot; /&gt;

&lt;blockquote&gt;
  所有节点 包括master与work节点，进入/etc/sysconfig目录修改kubelet配置文件如下：
&lt;/blockquote&gt;

&lt;img src=&quot;/assets/images/2020/07/kubernetes-csi-tencentcloud/kubelet.png&quot; alt=&quot;kubelet&quot; /&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;所有节点重启kubelet ：
systemctl restart kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  步骤3-6基本就是按照腾讯云文档来就可以了，唯一可怕的就少镜像被墙….最好把镜像打包放到国内镜像仓库，然后修改配置文件。然后还有csi-node的apiVersion要修改一下呢，直接修改为apps/v1。
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 23 Jul 2020 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/23/kubernetes-csi-tencentcloud-cbs/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/23/kubernetes-csi-tencentcloud-cbs/</guid>
        
        <category>kubernetes1.18.6</category>
        
        <category>kubernetes-csi-tencentcloud</category>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>2020-07-22-腾讯云-slb-kubeadm高可用集群搭建</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#背景&quot; id=&quot;markdown-toc-背景&quot;&gt;背景&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一-首先的还是环境初始化master-work节点全部执行&quot; id=&quot;markdown-toc-一-首先的还是环境初始化master-work节点全部执行&quot;&gt;一 .首先的还是环境初始化，master work节点全部执行&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-默认主机名已经与集群配置中对应hostnamectl--set-hostname设置对应主机名100420为slb负载均衡ip&quot; id=&quot;markdown-toc-1-默认主机名已经与集群配置中对应hostnamectl--set-hostname设置对应主机名100420为slb负载均衡ip&quot;&gt;1. 默认主机名已经与集群配置中对应，hostnamectl  set-hostname设置对应主机名（10.0.4.20为slb负载均衡ip）&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-升级linux内核&quot; id=&quot;markdown-toc-2-升级linux内核&quot;&gt;2. 升级linux内核&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-关闭swap交换分区&quot; id=&quot;markdown-toc-3-关闭swap交换分区&quot;&gt;3. 关闭swap交换分区&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-关闭selinux&quot; id=&quot;markdown-toc-4-关闭selinux&quot;&gt;4. 关闭selinux&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5--调整文件打开数等配置&quot; id=&quot;markdown-toc-5--调整文件打开数等配置&quot;&gt;5.  调整文件打开数等配置&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-开启ip转发优化-网桥等配置&quot; id=&quot;markdown-toc-6-开启ip转发优化-网桥等配置&quot;&gt;6. 开启ip转发优化 网桥等配置&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#7-加载ipvs&quot; id=&quot;markdown-toc-7-加载ipvs&quot;&gt;7. 加载ipvs&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#8-journal-日志相关避免日志重复搜集浪费系统资源修改systemctl启动的最小文件打开数量关闭ssh反向dns解析设置清理日志熟虑最大20m可根据个人需求设置&quot; id=&quot;markdown-toc-8-journal-日志相关避免日志重复搜集浪费系统资源修改systemctl启动的最小文件打开数量关闭ssh反向dns解析设置清理日志熟虑最大20m可根据个人需求设置&quot;&gt;8. journal 日志相关避免日志重复搜集，浪费系统资源。修改systemctl启动的最小文件打开数量,关闭ssh反向dns解析.设置清理日志熟虑，最大20m(可根据个人需求设置)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#9-配置yum源&quot; id=&quot;markdown-toc-9-配置yum源&quot;&gt;9. 配置yum源&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#10-安装基本服务&quot; id=&quot;markdown-toc-10-安装基本服务&quot;&gt;10. 安装基本服务&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#11-安装kubernetes&quot; id=&quot;markdown-toc-11-安装kubernetes&quot;&gt;11. 安装kubernetes&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#二--master节点操作&quot; id=&quot;markdown-toc-二--master节点操作&quot;&gt;二 . master节点操作&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-master节点安装haproxysh-master01-sh-master-02-sh-master03&quot; id=&quot;markdown-toc-1-master节点安装haproxysh-master01-sh-master-02-sh-master03&quot;&gt;1. master节点安装haproxy（sh-master01 sh-master-02 sh-master03）&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-kuberadm-master安装&quot; id=&quot;markdown-toc-2-kuberadm-master安装&quot;&gt;2. kuberadm master安装&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-配置flannel插件&quot; id=&quot;markdown-toc-3-配置flannel插件&quot;&gt;3. 配置flannel插件&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#集群搭建成功上下图&quot; id=&quot;markdown-toc-集群搭建成功上下图&quot;&gt;集群搭建成功上下图：&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#后记&quot; id=&quot;markdown-toc-后记&quot;&gt;后记&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-如果kubeadm-configyaml配置文件忘了设置ipvs了开启下ipvs这里记得在&quot; id=&quot;markdown-toc-1-如果kubeadm-configyaml配置文件忘了设置ipvs了开启下ipvs这里记得在&quot;&gt;1. 如果kubeadm-config.yaml配置文件忘了设置ipvs了开启下ipvs.这里记得在&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

集群配置：
centos7.7 64位

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ip&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;主机名&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.20&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vip&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.27&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.46&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.47&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-master-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.14&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.4.13&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sh-node-05&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;线上稳定跑着1.16.8版本kubeadm高可用ha kubernets集群。三台master节点，配置为4核心8G，slb+haproxy 代理6443实现高可用。work节点为5台8核心16g,主要跑了60多个应用300个左右容器。&lt;/li&gt;
  &lt;li&gt;集群采用了slb代理work节点80 443等端口然后用traefik对外暴露应用。日志采集使用了elastic on kubernetes（eck）收集集群日志保留7天内应用日志。另外还搭建了springboot对外收集前端post埋点日志，入kafka。logstash消费入elasticsearch。kibana展示数据。报警监控系统使用了promethus-oprator，报警alartmanager,企业微信报警。granfna展示。持久化存储开始搭建了rook-ceph1.1集群， 但是在版本升级还有节点异常时出现了各种问题，最终放弃。包括eck等应用都使用了local-storage方式存储，elasticsearch的备份使用了腾讯云对象存储服务cos，定制了elasticsearch镜像添加了相关组件。&lt;/li&gt;
  &lt;li&gt;项目的更新发布使用了jenkins，集成kubernets。线上环境已经正常运行近一年时间。&lt;/li&gt;
  &lt;li&gt;想体验下新版本，然后又动手搭建了一套1.18.6测试环境。中间犯了好多错误，比如iptables没有关闭，也更加深入了解了下负载均衡slb代理本地端口的过程。&lt;/li&gt;
  &lt;li&gt;
    大致过程与1.16差不多，自己写下日志记录一遍。然后今年想深入集成一下腾讯云的cbs.不要问我为什么不用腾讯云的tke.首先每个slb到现在应该还是只可以挂载一个ssl证书的，业务比较少，我不想管理多个负载均衡，然后负载均衡的策略也比较坑，偶尔tke集群slb测还经常更新。还有上传文件大小限制这样的策略。使用traefik的tcp代理很方便解决这些问题。而且我还是比较喜欢原生不喜欢定制。
  &lt;/li&gt;
  &lt;li&gt;关于环境的初始化和安装可以看下张馆长的文档，真心不错 https://zhangguanzhang.github.io/2019/11/24/kubeadm-base-use/。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;一-首先的还是环境初始化master-work节点全部执行&quot;&gt;一 .首先的还是环境初始化，master work节点全部执行&lt;/h3&gt;

&lt;h4 id=&quot;1-默认主机名已经与集群配置中对应hostnamectl--set-hostname设置对应主机名100420为slb负载均衡ip&quot;&gt;1. 默认主机名已经与集群配置中对应，hostnamectl  set-hostname设置对应主机名（10.0.4.20为slb负载均衡ip）&lt;/h4&gt;
&lt;h4 id=&quot;2-升级linux内核&quot;&gt;2. 升级linux内核&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;centos7默认内核为3.10版本，一般是建议把内核更新一下。
&lt;span class=&quot;c&quot;&gt;##导入key&lt;/span&gt;
rpm &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
&lt;span class=&quot;c&quot;&gt;##添加elrepo源&lt;/span&gt;
rpm &lt;span class=&quot;nt&quot;&gt;-ivh&lt;/span&gt; https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm
&lt;span class=&quot;c&quot;&gt;##查看可更新kernel版本&lt;/span&gt;
yum &lt;span class=&quot;nt&quot;&gt;--disablerepo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--enablerepo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elrepo-kernel&quot;&lt;/span&gt; list available
&lt;span class=&quot;c&quot;&gt;##关于kernel的版本 ml（mainline，主线最新版）  lt（长期支持版本）可参照https://www.cnblogs.com/clsn/p/10925653.html。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 安装长期支持版本&lt;/span&gt;
yum &lt;span class=&quot;nt&quot;&gt;--enablerepo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;elrepo-kernel &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kernel-lt
&lt;span class=&quot;c&quot;&gt;## 查看grub2启动选择项&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$1==&quot;menuentry &quot; {print i++ &quot; : &quot; $2}'&lt;/span&gt; /etc/grub2.cfg
&lt;span class=&quot;c&quot;&gt;##修改grub2.conf使内核生效&lt;/span&gt;
grub2-set-default 0
grub2-mkconfig &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /boot/grub2/grub.cfg
reboot
&lt;span class=&quot;c&quot;&gt;##验证内核&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;##删除旧内核&lt;/span&gt;
package-cleanup &lt;span class=&quot;nt&quot;&gt;--oldkernels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/kernel1.png&quot; alt=&quot;kernel1&quot; /&gt;
 &lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/kernel2.png&quot; alt=&quot;kernel2&quot; /&gt;
 &lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/kernel3.png&quot; alt=&quot;kernel3&quot; /&gt;
 &lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/kernel4.png&quot; alt=&quot;kerne41&quot; /&gt;
&lt;h4 id=&quot;3-关闭swap交换分区&quot;&gt;3. 关闭swap交换分区&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swapoff &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/.*swap.*/#&amp;amp;/'&lt;/span&gt; /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;4-关闭selinux&quot;&gt;4. 关闭selinux&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setenforce  0 
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot;&lt;/span&gt; /etc/sysconfig/selinux 
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot;&lt;/span&gt; /etc/selinux/config 
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot;&lt;/span&gt; /etc/sysconfig/selinux 
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot;&lt;/span&gt; /etc/selinux/config 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;5--调整文件打开数等配置&quot;&gt;5.  调整文件打开数等配置&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* soft nofile 65536&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* hard nofile 65536&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* soft nproc 65536&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* hard nproc 65536&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* soft  memlock  unlimited&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* hard memlock  unlimited&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;6-开启ip转发优化-网桥等配置&quot;&gt;6. 开启ip转发优化 网桥等配置&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/sysctl.d/k8s.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.neigh.default.gc_stale_time = 120
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
net.ipv4.ip_forward = 1
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 1024
net.ipv4.tcp_synack_retries = 2
# 要求iptables不对bridge的数据进行处理
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-arptables = 1
net.netfilter.nf_conntrack_max = 2310720
fs.inotify.max_user_watches=89100
fs.may_detach_mounts = 1
fs.file-max = 52706963
fs.nr_open = 52706963
vm.overcommit_memory=1
vm.panic_on_oom=0
vm.swappiness = 0
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;modprobe br_netfilter
sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/sysctl.d/k8s.conf
sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/sysctl.d/k8s.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
注意：由于kube-proxy使用ipvs的话为了防止timeout需要设置下tcp参数
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/sysctl.d/k8s.conf
# https://github.com/moby/moby/issues/31208 
# ipvsadm -l --timout
# 修复ipvs模式下长连接timeout问题 小于900即可
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 10
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;sysctl &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;7-加载ipvs&quot;&gt;7. 加载ipvs&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
:&amp;gt; /etc/modules-load.d/ipvs.conf
&lt;span class=&quot;nv&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
nf_conntrack
br_netfilter
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;kernel_module &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    /sbin/modinfo &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; filename &lt;span class=&quot;nv&quot;&gt;$kernel_module&lt;/span&gt; |&amp;amp; &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-qv&lt;/span&gt; ERROR &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$kernel_module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/modules-load.d/ipvs.conf &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; :
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;启动该模块管理服务
systemctl daemon-reload
systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; systemd-modules-load.service
lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ip_v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/ipvs.png&quot; alt=&quot;ipvs&quot; /&gt;
&lt;h4 id=&quot;8-journal-日志相关避免日志重复搜集浪费系统资源修改systemctl启动的最小文件打开数量关闭ssh反向dns解析设置清理日志熟虑最大20m可根据个人需求设置&quot;&gt;8. journal 日志相关避免日志重复搜集，浪费系统资源。修改systemctl启动的最小文件打开数量,关闭ssh反向dns解析.设置清理日志熟虑，最大20m(可根据个人需求设置)&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ri&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^\$ModLoad imjournal/#&amp;amp;/'&lt;/span&gt; /etc/rsyslog.conf
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ri&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^\$IMJournalStateFile/#&amp;amp;/'&lt;/span&gt; /etc/rsyslog.conf

&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ri&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^#(DefaultLimitCORE)=/\1=100000/'&lt;/span&gt; /etc/systemd/system.conf
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ri&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^#(DefaultLimitNOFILE)=/\1=100000/'&lt;/span&gt; /etc/systemd/system.conf

&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ri&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^#(UseDNS )yes/\1no/'&lt;/span&gt; /etc/ssh/sshd_config
journalctl &lt;span class=&quot;nt&quot;&gt;--vacuum-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;9-配置yum源&quot;&gt;9. 配置yum源&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum-config-manager &lt;span class=&quot;nt&quot;&gt;--add-repo&lt;/span&gt; http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;10-安装基本服务&quot;&gt;10. 安装基本服务&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;安装依赖包
yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; epel-release
yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; yum-utils device-mapper-persistent-data lvm2 net-tools conntrack-tools wget vim  ntpdate libseccomp libtool-ltdl
安装bash命令提示
yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; bash-argsparse bash-completion bash-#completion-extras
安装docker kubeadm:
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#配置镜像加速器 &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/docker
&lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/docker/daemon.json &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'
{
  &quot;registry-mirrors&quot;: [&quot;https://lrpol8ec.mirror.aliyuncs.com&quot;],
  &quot;log-driver&quot;: &quot;json-file&quot;,
  &quot;log-opts&quot;: {
    &quot;max-size&quot;: &quot;100m&quot;,
    &quot;max-file&quot;: &quot;3&quot;
},
  &quot;storage-driver&quot;: &quot;overlay2&quot;,
  &quot;storage-opts&quot;: [
    &quot;overlay2.override_kernel_check=true&quot;
  ]
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart docker
添加个日志最多值，否则有的苦了，入坑体验过了。docker要不要开机启动呢？我后面安装rook ceph 开机重新启动了老有错误，因为没有将节点设置为cordon，但是也懒了， 我就没有设置为开机启动。故开机启动后在启动docker了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;11-安装kubernetes&quot;&gt;11. 安装kubernetes&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#查看yum源中可支持版本&lt;/span&gt;
 yum list &lt;span class=&quot;nt&quot;&gt;--showduplicates&lt;/span&gt; kubeadm &lt;span class=&quot;nt&quot;&gt;--disableexcludes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes 

yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubelet kubeadm kubectl &lt;span class=&quot;nt&quot;&gt;--disableexcludes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes
&lt;span class=&quot;c&quot;&gt;##可指定自己要安装的版本&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#yum install -y kubelet-1.18.6 kubeadmt-1.18.6  kubectlt-1.18.6  --disableexcludes=kubernetes&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;二--master节点操作&quot;&gt;二 . master节点操作&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;注：slb内网传统型负载均衡使用了。尝试了两种方式：
 1. slb+haproxy slb 绑定三台master6443代理后端haproxy 8443端口。（kubeadm-config.yaml配置文件中controlPlaneEndpoint: &lt;span class=&quot;s2&quot;&gt;&quot;10.0.4.20:6443&quot;&lt;/span&gt;）。
2. keepalived +haproxy 配置slb地址（三台server设置不同权重，kubeadm-config.yaml配置文件中controlPlaneEndpoint: &lt;span class=&quot;s2&quot;&gt;&quot;10.0.4.20:8443&quot;&lt;/span&gt;）。
个人来说强迫症 就喜欢6443所以就用了第一种。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;1-master节点安装haproxysh-master01-sh-master-02-sh-master03&quot;&gt;1. master节点安装haproxy（sh-master01 sh-master-02 sh-master03）&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; haproxy
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/haproxy/haproxy.cfg

#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    tcp
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend kubernetes
    bind *:8443              #配置端口为8443
    mode tcp
    default_backend kubernetes
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend kubernetes           #后端服务器，也就是说访问192.168.255.140:8443会将请求转发到后端的三台，这样就实现了负载均衡
    balance roundrobin               
    server master1  10.0.4.27:6443 check maxconn 2000
    server master2  10.0.4.46:6443 check maxconn 2000
    server master3  10.0.4.47:6443 check maxconn 2000
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;haproxy &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl start haproxy &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl status haproxy

腾讯云slb负载均衡最终还是用了传统型，监听器tcp 6443代理后端三台haproxy 8443端口
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/slb.png&quot; alt=&quot;slb&quot; /&gt;
  &lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/slb1.png&quot; alt=&quot;slb1&quot; /&gt;
&lt;h4 id=&quot;2-kuberadm-master安装&quot;&gt;2. kuberadm master安装&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;master1节点
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; kubeadm-config.yaml
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
networking:
  serviceSubnet: &quot;172.251.0.0/16&quot;                         #设置svc网段
  podSubnet: &quot;172.252.0.0/16&quot;                             #设置Pod网段
  dnsDomain: &quot;layabox.sh&quot;
kubernetesVersion: &quot;v1.18.6&quot;                            #设置安装版本
controlPlaneEndpoint: &quot;10.0.4.20:6443&quot;             #设置相关API VIP地址
dns: 
  type: CoreDNS
apiServer:
  certSANs:
  - sh-master-01
  - sh-master-02
  - sh-master-03
  - sh-master.k8s.io
  - 127.0.0.1
  - 10.0.4.27
  - 10.0.4.46
  - 10.0.4.47
  - 10.0.4.20
  timeoutForControlPlane: 4m0s
certificatesDir: &quot;/etc/kubernetes/pki&quot;
imageRepository: &quot;ccr.ccs.tencentyun.com/k8s_containers&quot;  #国内貌似没有最新的镜像库，自己同步到自己镜像仓库了，开始没有将namespace设置为公开，后期无法设置对外，抱歉。
etcd:
    local:
      dataDir: /var/lib/etcd
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
featureGates:
  SupportIPVSProxyMode: true
mode: ipvs  #使用ipvs方式
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;kubeadm init &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; kubeadm-config.yaml
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;p /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config

按照输出master02 ，master03节点加入集群
将master01 /etc/kubernetes/pki目录下ca.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; sa.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; front-proxy-ca.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; etcd/ca&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 打包分发到master02,master03 /etc/kubernetes/pki目录下 
 kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;10.0.4.20:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; jiprvz.0rkovt1gx3d658j     &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:5d631bb4bdce033163037ef21f663c88e058e70c6c362c9c5ccb1a92095     &lt;span class=&quot;nt&quot;&gt;--control-plane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--certificate-key&lt;/span&gt; 
然后同master01一样执行一遍下面的命令：
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;p /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/master1.png&quot; alt=&quot;master1&quot; /&gt;
注： key都胡乱输入的这里没有用自己的。此时任意一台master执行kubectl get nodes  STATUS一列应该都是NOTReady.
&lt;h4 id=&quot;3-配置flannel插件&quot;&gt;3. 配置flannel插件&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
修改配置文件中Network 为自己设置的子网，我这里是172.252.0.0/16
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; kube-flannel.yml
然后基本发现 master节点都已经redeay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
### 二 . work节点j加入集群
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;192.168.3.9:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 3o6dy0.9gbbfuf55xiloe9d &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:5d631bb4bdce01dcad51163037ef21f663c88e058e70c6c362c9c5ccb1a92095
OK集群算是初始搭建完了，不知道跑一遍咋样，我的是正常跑起来了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  确认集群节点是否ready。常见问题，集群开启了ipvs，但是我iptables没有关闭，然后节点一直加入不了，看了眼防火墙开着呢没有关闭规则。由于主机都是云主机，就开启了安全组策略，把防火墙都关闭了。如果是其他环境一定记得检查防火墙策略。
&lt;/blockquote&gt;

&lt;h2 id=&quot;集群搭建成功上下图&quot;&gt;集群搭建成功上下图：&lt;/h2&gt;
&lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/status.png&quot; alt=&quot;status&quot; /&gt;

&lt;img src=&quot;/assets/images/2020/07/kubernetes1.18.6/status1.png&quot; alt=&quot;status1&quot; /&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;h4 id=&quot;1-如果kubeadm-configyaml配置文件忘了设置ipvs了开启下ipvs这里记得在&quot;&gt;1. 如果kubeadm-config.yaml配置文件忘了设置ipvs了开启下ipvs.这里记得在&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl edit cm kube-proxy &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system
configmap/kube-proxy edited

&lt;span class=&quot;c&quot;&gt;#修改如下&lt;/span&gt;
kind: MasterConfiguration
apiVersion: kubeadm.k8s.io/v1alpha1
...
ipvs:
      excludeCIDRs: null
      minSyncPeriod: 0s
      scheduler: &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      syncPeriod: 30s
    kind: KubeProxyConfiguration
    metricsBindAddress: 127.0.0.1:10249
    mode: &lt;span class=&quot;s2&quot;&gt;&quot;ipvs&quot;&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;#修改&lt;/span&gt;

kubectl get pod &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;kube-proxy |awk &lt;span class=&quot;s1&quot;&gt;'{system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  貌似应该就跑起来了，然后后面应该还要做的：
  &lt;ol&gt;
    &lt;li&gt;etcd的备份，虽然有三个master节点 数据无价，还是做下etcd的备份要好。&lt;/li&gt;
    &lt;li&gt;pods 可能都running了 但是最后还是看下日志，肯能有些小的失误，看日志是个好习惯的，老版本糊里糊涂搭建的时候kubernetes插件pod打了一大堆日志 虽然可以使用，但是还是要追求下完美的。由此可见搭建日志采集系统还是很有必要的。&lt;/li&gt;
    &lt;li&gt;work节点最好打上标签，给服务设置亲和性和反亲和性。资源的调度使用值貌似可以设置的？否则后面有的work会出现pods一直创建中，打标签合理规划资源还是很有必要的。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 22 Jul 2020 16:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/22/tencent-slb-kubeadm-ha/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/22/tencent-slb-kubeadm-ha/</guid>
        
        <category>kubernetes1.18.6</category>
        
        <category>kuberadm</category>
        
        <category>高可用</category>
        
        <category>ha</category>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>2019-12-27-traefik</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#描述背景&quot; id=&quot;markdown-toc-描述背景&quot;&gt;描述背景：&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-mysslcom是个好网站&quot; id=&quot;markdown-toc-1-mysslcom是个好网站&quot;&gt;1. myssl.com是个好网站&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-升级traefik配置文件就不详细写了-可以参考httpswanziimposts201912kubernetes-traefik-v21-deploy丸子的文档-基本就是20的traefik-crdyaml配置文件增加traefikservice然后traefik-rbacyaml增加traefikservices的rules&quot; id=&quot;markdown-toc-2-升级traefik配置文件就不详细写了-可以参考httpswanziimposts201912kubernetes-traefik-v21-deploy丸子的文档-基本就是20的traefik-crdyaml配置文件增加traefikservice然后traefik-rbacyaml增加traefikservices的rules&quot;&gt;2. 升级traefik配置文件.就不详细写了 可以参考https://wanzi.im/posts/2019/12/kubernetes-traefik-v2.1-deploy丸子的文档， 基本就是2.0的traefik-crd.yaml配置文件增加TraefikService，然后traefik-rbac.yaml增加traefikservices的rules.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-参照myssl的测试报告配置tlsoption&quot; id=&quot;markdown-toc-3-参照myssl的测试报告配置tlsoption&quot;&gt;3. 参照myssl的测试报告配置TLSOption&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-增加个hsts吧&quot; id=&quot;markdown-toc-4-增加个hsts吧&quot;&gt;4 增加个hsts吧&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-修改原来的ingressroute配置文件&quot; id=&quot;markdown-toc-5-修改原来的ingressroute配置文件&quot;&gt;5. 修改原来的ingressroute配置文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-myssl测试一下吧&quot; id=&quot;markdown-toc-6-myssl测试一下吧&quot;&gt;6. myssl测试一下吧&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

集群配置：
初始集群环境kubeadm 1.16.3

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ip&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;自定义域名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;主机名&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.3.8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;master.k8s.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;k8s-vip&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.3.10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;master01.k8s.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;k8s-master-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.3.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;master02.k8s.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;k8s-master-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.3.12&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;master03.k8s.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;k8s-master-03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.3.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node01.k8s.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;k8s-node-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.3.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node02.k8s.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;k8s-node-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.3.4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node03.k8s.io&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;k8s-node-03&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;描述背景&quot;&gt;描述背景：&lt;/h1&gt;
&lt;blockquote&gt;
  traefik2的初始环境https://duiniwukenaihe.github.io/2019/10/17/k8s-traefik2/已经安装，现在的默认版本是2.1 。新版本增加了 TraefikService,的支持，具体可以参考https://wanzi.im/posts/2019/12/kubernetes-traefik-v2.1-deploy/。测试没有充足直接用于了生产环境，然后发现微信小程序中应用出现问题如下图：
&lt;/blockquote&gt;

&lt;img src=&quot;/assets/images/traefik/error.png&quot; alt=&quot;error&quot; /&gt;

&lt;blockquote&gt;
  很刺激 查了下 貌似微信小程序支持的tls默认是1.2我的traefik默认的tls是1.3……然后有简单使用的腾讯云api的网关也默认都是1.2的直接指定的后端域名tls1.3的访问也出现这种状况了….。下面还是记录下处理过程吧.
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-mysslcom是个好网站&quot;&gt;1. myssl.com是个好网站&lt;/h2&gt;
&lt;blockquote&gt;
  证书我都是用的腾讯云的购买的亚洲诚信的。通过这个网站可以查看自己的网站安全等级，另外他还可以给一些安全方面的建议。
&lt;/blockquote&gt;

&lt;img src=&quot;/assets/images/traefik/myssl.png&quot; alt=&quot;myssl&quot; /&gt;

&lt;blockquote&gt;
  通过评级测试我的域名仅为B，而且证书支持了tls1.3
&lt;/blockquote&gt;

&lt;img src=&quot;/assets/images/traefik/bad.png&quot; alt=&quot;bad&quot; /&gt;
   &lt;img src=&quot;/assets/images/traefik/1.3.png&quot; alt=&quot;1.3&quot; /&gt;

&lt;blockquote&gt;
  OK,下面先把自己的traefik升级到2.1增加TraefikService的支持吧 .
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-升级traefik配置文件就不详细写了-可以参考httpswanziimposts201912kubernetes-traefik-v21-deploy丸子的文档-基本就是20的traefik-crdyaml配置文件增加traefikservice然后traefik-rbacyaml增加traefikservices的rules&quot;&gt;2. 升级traefik配置文件.就不详细写了 可以参考https://wanzi.im/posts/2019/12/kubernetes-traefik-v2.1-deploy丸子的文档， 基本就是2.0的traefik-crd.yaml配置文件增加TraefikService，然后traefik-rbac.yaml增加traefikservices的rules.&lt;/h2&gt;

&lt;h2 id=&quot;3-参照myssl的测试报告配置tlsoption&quot;&gt;3. 参照myssl的测试报告配置TLSOption&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; | kubectl apply -f -
apiVersion: traefik.containo.us/v1alpha1
kind: TLSOption
metadata:
  name: mytlsoption
  namespaces: kube-system

spec:
  maxVersion: VersionTLS12
  snistrict: true
  ciphersuites:
    - TLS_ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;注：namespace就写kube-system了，哈哈当然其实我写的是release测试的其实.....与文不符哈。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;4-增加个hsts吧&quot;&gt;4 增加个hsts吧&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; | kubectl apply -f -
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: hsts
  namespaces: kube-system
spec:
  headers:
      stsSeconds: 31536000
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;注：默认就先增加下hsts了 其实其他的middleware也可以加下。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;5-修改原来的ingressroute配置文件&quot;&gt;5. 修改原来的ingressroute配置文件&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&amp;gt; traefik-dashboard-route-https.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  namespace: kube-system
  name: traefik-dashboard-route-https
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;traefik.saynaihe.com&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;)
      kind: Rule
      services:
        - name: traefik
          port: 8080
  tls:
    secretName: all-saynaihe-com
    options:
      name: mytlsoption
      middlewares:
        - name: hsts
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;
EOF
&lt;/span&gt;看别人写的例子tls的配置都写在最下面了 我也就抄写一下了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;6-myssl测试一下吧&quot;&gt;6. myssl测试一下吧&lt;/h2&gt;
&lt;img src=&quot;/assets/images/traefik/ok.png&quot; alt=&quot;ok&quot; /&gt;
   &lt;img src=&quot;/assets/images/traefik/ok1.png&quot; alt=&quot;ok1&quot; /&gt;

&lt;blockquote&gt;
  以上文图很多不符啊，但是过程就是这样的，可以参考一下。至于PCI DSS不合规，我就忽略了因为咱也不是支付行业，tls1.0也没有必要屏蔽了就这样吧
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 27 Dec 2019 18:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/12/27/traefik/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/12/27/traefik/</guid>
        
        <category>kubernetes</category>
        
        <category>traefik</category>
        
        
        <category>traefik</category>
        
      </item>
    
  </channel>
</rss>
